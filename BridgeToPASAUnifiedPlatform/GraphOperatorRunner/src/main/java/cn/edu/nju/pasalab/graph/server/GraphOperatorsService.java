/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.nju.pasalab.graph.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-23")
public class GraphOperatorsService {

  public interface Iface {

    public void GopCSVFileToGraph(java.util.Map<String, String> arguments) throws org.apache.thrift.TException, Exception;

    public void GopGraphToCSVFile(java.util.Map<String, String> arguments) throws org.apache.thrift.TException, Exception;

    public void GopLabelPropagation(java.util.Map<String, String> arguments) throws org.apache.thrift.TException, Exception;

  }

  public interface AsyncIface {

    public void GopCSVFileToGraph(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void GopGraphToCSVFile(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void GopLabelPropagation(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void GopCSVFileToGraph(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      send_GopCSVFileToGraph(arguments);
      recv_GopCSVFileToGraph();
    }

    public void send_GopCSVFileToGraph(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      GopCSVFileToGraph_args args = new GopCSVFileToGraph_args();
      args.setArguments(arguments);
      sendBase("GopCSVFileToGraph", args);
    }

    public void recv_GopCSVFileToGraph() throws org.apache.thrift.TException
    {
      GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
      receiveBase(result, "GopCSVFileToGraph");
      return;
    }

    public void GopGraphToCSVFile(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      send_GopGraphToCSVFile(arguments);
      recv_GopGraphToCSVFile();
    }

    public void send_GopGraphToCSVFile(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      GopGraphToCSVFile_args args = new GopGraphToCSVFile_args();
      args.setArguments(arguments);
      sendBase("GopGraphToCSVFile", args);
    }

    public void recv_GopGraphToCSVFile() throws org.apache.thrift.TException
    {
      GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
      receiveBase(result, "GopGraphToCSVFile");
      return;
    }

    public void GopLabelPropagation(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      send_GopLabelPropagation(arguments);
      recv_GopLabelPropagation();
    }

    public void send_GopLabelPropagation(java.util.Map<String, String> arguments) throws org.apache.thrift.TException
    {
      GopLabelPropagation_args args = new GopLabelPropagation_args();
      args.setArguments(arguments);
      sendBase("GopLabelPropagation", args);
    }

    public void recv_GopLabelPropagation() throws org.apache.thrift.TException
    {
      GopLabelPropagation_result result = new GopLabelPropagation_result();
      receiveBase(result, "GopLabelPropagation");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GopCSVFileToGraph(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopCSVFileToGraph_call method_call = new GopCSVFileToGraph_call(arguments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopCSVFileToGraph_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<String, String> arguments;
      public GopCSVFileToGraph_call(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arguments = arguments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopCSVFileToGraph", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopCSVFileToGraph_args args = new GopCSVFileToGraph_args();
        args.setArguments(arguments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void GopGraphToCSVFile(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopGraphToCSVFile_call method_call = new GopGraphToCSVFile_call(arguments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopGraphToCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<String, String> arguments;
      public GopGraphToCSVFile_call(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arguments = arguments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopGraphToCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopGraphToCSVFile_args args = new GopGraphToCSVFile_args();
        args.setArguments(arguments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void GopLabelPropagation(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopLabelPropagation_call method_call = new GopLabelPropagation_call(arguments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopLabelPropagation_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<String, String> arguments;
      public GopLabelPropagation_call(java.util.Map<String, String> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arguments = arguments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopLabelPropagation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopLabelPropagation_args args = new GopLabelPropagation_args();
        args.setArguments(arguments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GopCSVFileToGraph", new GopCSVFileToGraph());
      processMap.put("GopGraphToCSVFile", new GopGraphToCSVFile());
      processMap.put("GopLabelPropagation", new GopLabelPropagation());
      return processMap;
    }

    public static class GopCSVFileToGraph<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopCSVFileToGraph_args> {
      public GopCSVFileToGraph() {
        super("GopCSVFileToGraph");
      }

      public GopCSVFileToGraph_args getEmptyArgsInstance() {
        return new GopCSVFileToGraph_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopCSVFileToGraph_result getResult(I iface, GopCSVFileToGraph_args args) throws org.apache.thrift.TException {
        GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
        try {
          iface.GopCSVFileToGraph(args.arguments);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

    public static class GopGraphToCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopGraphToCSVFile_args> {
      public GopGraphToCSVFile() {
        super("GopGraphToCSVFile");
      }

      public GopGraphToCSVFile_args getEmptyArgsInstance() {
        return new GopGraphToCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopGraphToCSVFile_result getResult(I iface, GopGraphToCSVFile_args args) throws org.apache.thrift.TException {
        GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
        try {
          iface.GopGraphToCSVFile(args.arguments);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

    public static class GopLabelPropagation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopLabelPropagation_args> {
      public GopLabelPropagation() {
        super("GopLabelPropagation");
      }

      public GopLabelPropagation_args getEmptyArgsInstance() {
        return new GopLabelPropagation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopLabelPropagation_result getResult(I iface, GopLabelPropagation_args args) throws org.apache.thrift.TException {
        GopLabelPropagation_result result = new GopLabelPropagation_result();
        try {
          iface.GopLabelPropagation(args.arguments);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GopCSVFileToGraph", new GopCSVFileToGraph());
      processMap.put("GopGraphToCSVFile", new GopGraphToCSVFile());
      processMap.put("GopLabelPropagation", new GopLabelPropagation());
      return processMap;
    }

    public static class GopCSVFileToGraph<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopCSVFileToGraph_args, Void> {
      public GopCSVFileToGraph() {
        super("GopCSVFileToGraph");
      }

      public GopCSVFileToGraph_args getEmptyArgsInstance() {
        return new GopCSVFileToGraph_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopCSVFileToGraph_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.GopCSVFileToGraph(args.arguments,resultHandler);
      }
    }

    public static class GopGraphToCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopGraphToCSVFile_args, Void> {
      public GopGraphToCSVFile() {
        super("GopGraphToCSVFile");
      }

      public GopGraphToCSVFile_args getEmptyArgsInstance() {
        return new GopGraphToCSVFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopGraphToCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.GopGraphToCSVFile(args.arguments,resultHandler);
      }
    }

    public static class GopLabelPropagation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopLabelPropagation_args, Void> {
      public GopLabelPropagation() {
        super("GopLabelPropagation");
      }

      public GopLabelPropagation_args getEmptyArgsInstance() {
        return new GopLabelPropagation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            GopLabelPropagation_result result = new GopLabelPropagation_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopLabelPropagation_result result = new GopLabelPropagation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopLabelPropagation_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.GopLabelPropagation(args.arguments,resultHandler);
      }
    }

  }

  public static class GopCSVFileToGraph_args implements org.apache.thrift.TBase<GopCSVFileToGraph_args, GopCSVFileToGraph_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopCSVFileToGraph_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopCSVFileToGraph_args");

    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopCSVFileToGraph_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopCSVFileToGraph_argsTupleSchemeFactory();

    public java.util.Map<String, String> arguments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARGUMENTS((short)1, "arguments");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARGUMENTS
            return ARGUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopCSVFileToGraph_args.class, metaDataMap);
    }

    public GopCSVFileToGraph_args() {
    }

    public GopCSVFileToGraph_args(
      java.util.Map<String, String> arguments)
    {
      this();
      this.arguments = arguments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopCSVFileToGraph_args(GopCSVFileToGraph_args other) {
      if (other.isSetArguments()) {
        java.util.Map<String, String> __this__arguments = new java.util.HashMap<String, String>(other.arguments);
        this.arguments = __this__arguments;
      }
    }

    public GopCSVFileToGraph_args deepCopy() {
      return new GopCSVFileToGraph_args(this);
    }

    @Override
    public void clear() {
      this.arguments = null;
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(String key, String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<String, String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<String, String> getArguments() {
      return this.arguments;
    }

    public GopCSVFileToGraph_args setArguments(java.util.Map<String, String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<String, String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARGUMENTS:
        return getArguments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARGUMENTS:
        return isSetArguments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopCSVFileToGraph_args)
        return this.equals((GopCSVFileToGraph_args)that);
      return false;
    }

    public boolean equals(GopCSVFileToGraph_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopCSVFileToGraph_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopCSVFileToGraph_args(");
      boolean first = true;

      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopCSVFileToGraph_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_argsStandardScheme getScheme() {
        return new GopCSVFileToGraph_argsStandardScheme();
      }
    }

    private static class GopCSVFileToGraph_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopCSVFileToGraph_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<String, String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.arguments.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopCSVFileToGraph_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_argsTupleScheme getScheme() {
        return new GopCSVFileToGraph_argsTupleScheme();
      }
    }

    private static class GopCSVFileToGraph_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopCSVFileToGraph_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArguments()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<String, String> _iter5 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<String, String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.arguments.put(_key7, _val8);
            }
          }
          struct.setArgumentsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopCSVFileToGraph_result implements org.apache.thrift.TBase<GopCSVFileToGraph_result, GopCSVFileToGraph_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopCSVFileToGraph_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopCSVFileToGraph_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopCSVFileToGraph_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopCSVFileToGraph_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopCSVFileToGraph_result.class, metaDataMap);
    }

    public GopCSVFileToGraph_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopCSVFileToGraph_result(GopCSVFileToGraph_result other) {
    }

    public GopCSVFileToGraph_result deepCopy() {
      return new GopCSVFileToGraph_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopCSVFileToGraph_result)
        return this.equals((GopCSVFileToGraph_result)that);
      return false;
    }

    public boolean equals(GopCSVFileToGraph_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GopCSVFileToGraph_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopCSVFileToGraph_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopCSVFileToGraph_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_resultStandardScheme getScheme() {
        return new GopCSVFileToGraph_resultStandardScheme();
      }
    }

    private static class GopCSVFileToGraph_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopCSVFileToGraph_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopCSVFileToGraph_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_resultTupleScheme getScheme() {
        return new GopCSVFileToGraph_resultTupleScheme();
      }
    }

    private static class GopCSVFileToGraph_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopCSVFileToGraph_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopGraphToCSVFile_args implements org.apache.thrift.TBase<GopGraphToCSVFile_args, GopGraphToCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopGraphToCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopGraphToCSVFile_args");

    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopGraphToCSVFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopGraphToCSVFile_argsTupleSchemeFactory();

    public java.util.Map<String, String> arguments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARGUMENTS((short)1, "arguments");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARGUMENTS
            return ARGUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopGraphToCSVFile_args.class, metaDataMap);
    }

    public GopGraphToCSVFile_args() {
    }

    public GopGraphToCSVFile_args(
      java.util.Map<String, String> arguments)
    {
      this();
      this.arguments = arguments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopGraphToCSVFile_args(GopGraphToCSVFile_args other) {
      if (other.isSetArguments()) {
        java.util.Map<String, String> __this__arguments = new java.util.HashMap<String, String>(other.arguments);
        this.arguments = __this__arguments;
      }
    }

    public GopGraphToCSVFile_args deepCopy() {
      return new GopGraphToCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.arguments = null;
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(String key, String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<String, String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<String, String> getArguments() {
      return this.arguments;
    }

    public GopGraphToCSVFile_args setArguments(java.util.Map<String, String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<String, String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARGUMENTS:
        return getArguments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARGUMENTS:
        return isSetArguments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopGraphToCSVFile_args)
        return this.equals((GopGraphToCSVFile_args)that);
      return false;
    }

    public boolean equals(GopGraphToCSVFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopGraphToCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopGraphToCSVFile_args(");
      boolean first = true;

      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopGraphToCSVFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_argsStandardScheme getScheme() {
        return new GopGraphToCSVFile_argsStandardScheme();
      }
    }

    private static class GopGraphToCSVFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopGraphToCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<String, String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.arguments.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<String, String> _iter14 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopGraphToCSVFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_argsTupleScheme getScheme() {
        return new GopGraphToCSVFile_argsTupleScheme();
      }
    }

    private static class GopGraphToCSVFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopGraphToCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArguments()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<String, String> _iter15 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<String, String>(2*_map16.size);
            String _key17;
            String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.arguments.put(_key17, _val18);
            }
          }
          struct.setArgumentsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopGraphToCSVFile_result implements org.apache.thrift.TBase<GopGraphToCSVFile_result, GopGraphToCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopGraphToCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopGraphToCSVFile_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopGraphToCSVFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopGraphToCSVFile_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopGraphToCSVFile_result.class, metaDataMap);
    }

    public GopGraphToCSVFile_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopGraphToCSVFile_result(GopGraphToCSVFile_result other) {
    }

    public GopGraphToCSVFile_result deepCopy() {
      return new GopGraphToCSVFile_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopGraphToCSVFile_result)
        return this.equals((GopGraphToCSVFile_result)that);
      return false;
    }

    public boolean equals(GopGraphToCSVFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GopGraphToCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopGraphToCSVFile_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopGraphToCSVFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_resultStandardScheme getScheme() {
        return new GopGraphToCSVFile_resultStandardScheme();
      }
    }

    private static class GopGraphToCSVFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopGraphToCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopGraphToCSVFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_resultTupleScheme getScheme() {
        return new GopGraphToCSVFile_resultTupleScheme();
      }
    }

    private static class GopGraphToCSVFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopGraphToCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopLabelPropagation_args implements org.apache.thrift.TBase<GopLabelPropagation_args, GopLabelPropagation_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopLabelPropagation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopLabelPropagation_args");

    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopLabelPropagation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopLabelPropagation_argsTupleSchemeFactory();

    public java.util.Map<String, String> arguments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARGUMENTS((short)1, "arguments");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARGUMENTS
            return ARGUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopLabelPropagation_args.class, metaDataMap);
    }

    public GopLabelPropagation_args() {
    }

    public GopLabelPropagation_args(
      java.util.Map<String, String> arguments)
    {
      this();
      this.arguments = arguments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopLabelPropagation_args(GopLabelPropagation_args other) {
      if (other.isSetArguments()) {
        java.util.Map<String, String> __this__arguments = new java.util.HashMap<String, String>(other.arguments);
        this.arguments = __this__arguments;
      }
    }

    public GopLabelPropagation_args deepCopy() {
      return new GopLabelPropagation_args(this);
    }

    @Override
    public void clear() {
      this.arguments = null;
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(String key, String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<String, String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<String, String> getArguments() {
      return this.arguments;
    }

    public GopLabelPropagation_args setArguments(java.util.Map<String, String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<String, String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARGUMENTS:
        return getArguments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARGUMENTS:
        return isSetArguments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopLabelPropagation_args)
        return this.equals((GopLabelPropagation_args)that);
      return false;
    }

    public boolean equals(GopLabelPropagation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopLabelPropagation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopLabelPropagation_args(");
      boolean first = true;

      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopLabelPropagation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_argsStandardScheme getScheme() {
        return new GopLabelPropagation_argsStandardScheme();
      }
    }

    private static class GopLabelPropagation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopLabelPropagation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<String, String>(2*_map20.size);
                  String _key21;
                  String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.arguments.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<String, String> _iter24 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopLabelPropagation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_argsTupleScheme getScheme() {
        return new GopLabelPropagation_argsTupleScheme();
      }
    }

    private static class GopLabelPropagation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopLabelPropagation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArguments()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<String, String> _iter25 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<String, String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.arguments.put(_key27, _val28);
            }
          }
          struct.setArgumentsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopLabelPropagation_result implements org.apache.thrift.TBase<GopLabelPropagation_result, GopLabelPropagation_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopLabelPropagation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopLabelPropagation_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopLabelPropagation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopLabelPropagation_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopLabelPropagation_result.class, metaDataMap);
    }

    public GopLabelPropagation_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopLabelPropagation_result(GopLabelPropagation_result other) {
    }

    public GopLabelPropagation_result deepCopy() {
      return new GopLabelPropagation_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopLabelPropagation_result)
        return this.equals((GopLabelPropagation_result)that);
      return false;
    }

    public boolean equals(GopLabelPropagation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GopLabelPropagation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopLabelPropagation_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopLabelPropagation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_resultStandardScheme getScheme() {
        return new GopLabelPropagation_resultStandardScheme();
      }
    }

    private static class GopLabelPropagation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopLabelPropagation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopLabelPropagation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_resultTupleScheme getScheme() {
        return new GopLabelPropagation_resultTupleScheme();
      }
    }

    private static class GopLabelPropagation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopLabelPropagation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
