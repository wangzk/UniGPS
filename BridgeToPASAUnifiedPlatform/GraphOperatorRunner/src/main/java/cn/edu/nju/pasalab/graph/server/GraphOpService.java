package cn.edu.nju.pasalab.graph.server;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-11")
public class GraphOpService {

  public interface Iface {

    public String GopCSVFileToGraph(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns) throws org.apache.thrift.TException, Exception;

    public String GopLabelPropagation(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File) throws org.apache.thrift.TException, Exception;

    public String GopGraphToCSVFile(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File) throws org.apache.thrift.TException, Exception;

  }

  public interface AsyncIface {

    public void GopCSVFileToGraph(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void GopLabelPropagation(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void GopGraphToCSVFile(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String GopCSVFileToGraph(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns) throws org.apache.thrift.TException
    {
      send_GopCSVFileToGraph(Input_Edge_CSV_File_Path, Edge_Src_Column, Edge_Dst_Column, Edge_Property_Columns, Directed, Output_Graph_Type, Output_Graph_Conf_File, Run_Mode, Run_Mode_Conf_File, Input_Vertex_CSV_File_Path, Vertex_Name_Column, Vertex_Property_Columns);
      return recv_GopCSVFileToGraph();
    }

    public void send_GopCSVFileToGraph(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns) throws org.apache.thrift.TException
    {
      GopCSVFileToGraph_args args = new GopCSVFileToGraph_args();
      args.setInput_Edge_CSV_File_Path(Input_Edge_CSV_File_Path);
      args.setEdge_Src_Column(Edge_Src_Column);
      args.setEdge_Dst_Column(Edge_Dst_Column);
      args.setEdge_Property_Columns(Edge_Property_Columns);
      args.setDirected(Directed);
      args.setOutput_Graph_Type(Output_Graph_Type);
      args.setOutput_Graph_Conf_File(Output_Graph_Conf_File);
      args.setRun_Mode(Run_Mode);
      args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
      args.setInput_Vertex_CSV_File_Path(Input_Vertex_CSV_File_Path);
      args.setVertex_Name_Column(Vertex_Name_Column);
      args.setVertex_Property_Columns(Vertex_Property_Columns);
      sendBase("GopCSVFileToGraph", args);
    }

    public String recv_GopCSVFileToGraph() throws org.apache.thrift.TException
    {
      GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
      receiveBase(result, "GopCSVFileToGraph");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GopCSVFileToGraph failed: unknown result");
    }

    public String GopLabelPropagation(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File) throws org.apache.thrift.TException
    {
      send_GopLabelPropagation(Input_Graph_Type, Input_Graph_Conf_File, Result_Property_Name, Run_Mode, Run_Mode_Conf_File, Output_Graph_Type, Output_Graph_Conf_File);
      return recv_GopLabelPropagation();
    }

    public void send_GopLabelPropagation(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File) throws org.apache.thrift.TException
    {
      GopLabelPropagation_args args = new GopLabelPropagation_args();
      args.setInput_Graph_Type(Input_Graph_Type);
      args.setInput_Graph_Conf_File(Input_Graph_Conf_File);
      args.setResult_Property_Name(Result_Property_Name);
      args.setRun_Mode(Run_Mode);
      args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
      args.setOutput_Graph_Type(Output_Graph_Type);
      args.setOutput_Graph_Conf_File(Output_Graph_Conf_File);
      sendBase("GopLabelPropagation", args);
    }

    public String recv_GopLabelPropagation() throws org.apache.thrift.TException
    {
      GopLabelPropagation_result result = new GopLabelPropagation_result();
      receiveBase(result, "GopLabelPropagation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GopLabelPropagation failed: unknown result");
    }

    public String GopGraphToCSVFile(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File) throws org.apache.thrift.TException
    {
      send_GopGraphToCSVFile(Input_Graph_Type, Input_Graph_Conf_File, Vertex_Property_Names, Output_Vertex_CSV_File, Edge_Property_Names, Output_Edge_CSV_File, Run_Mode, Run_Mode_Conf_File);
      return recv_GopGraphToCSVFile();
    }

    public void send_GopGraphToCSVFile(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File) throws org.apache.thrift.TException
    {
      GopGraphToCSVFile_args args = new GopGraphToCSVFile_args();
      args.setInput_Graph_Type(Input_Graph_Type);
      args.setInput_Graph_Conf_File(Input_Graph_Conf_File);
      args.setVertex_Property_Names(Vertex_Property_Names);
      args.setOutput_Vertex_CSV_File(Output_Vertex_CSV_File);
      args.setEdge_Property_Names(Edge_Property_Names);
      args.setOutput_Edge_CSV_File(Output_Edge_CSV_File);
      args.setRun_Mode(Run_Mode);
      args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
      sendBase("GopGraphToCSVFile", args);
    }

    public String recv_GopGraphToCSVFile() throws org.apache.thrift.TException
    {
      GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
      receiveBase(result, "GopGraphToCSVFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GopGraphToCSVFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GopCSVFileToGraph(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopCSVFileToGraph_call method_call = new GopCSVFileToGraph_call(Input_Edge_CSV_File_Path, Edge_Src_Column, Edge_Dst_Column, Edge_Property_Columns, Directed, Output_Graph_Type, Output_Graph_Conf_File, Run_Mode, Run_Mode_Conf_File, Input_Vertex_CSV_File_Path, Vertex_Name_Column, Vertex_Property_Columns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopCSVFileToGraph_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String Input_Edge_CSV_File_Path;
      private String Edge_Src_Column;
      private String Edge_Dst_Column;
      private String Edge_Property_Columns;
      private String Directed;
      private String Output_Graph_Type;
      private String Output_Graph_Conf_File;
      private String Run_Mode;
      private String Run_Mode_Conf_File;
      private String Input_Vertex_CSV_File_Path;
      private String Vertex_Name_Column;
      private String Vertex_Property_Columns;
      public GopCSVFileToGraph_call(String Input_Edge_CSV_File_Path, String Edge_Src_Column, String Edge_Dst_Column, String Edge_Property_Columns, String Directed, String Output_Graph_Type, String Output_Graph_Conf_File, String Run_Mode, String Run_Mode_Conf_File, String Input_Vertex_CSV_File_Path, String Vertex_Name_Column, String Vertex_Property_Columns, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Input_Edge_CSV_File_Path = Input_Edge_CSV_File_Path;
        this.Edge_Src_Column = Edge_Src_Column;
        this.Edge_Dst_Column = Edge_Dst_Column;
        this.Edge_Property_Columns = Edge_Property_Columns;
        this.Directed = Directed;
        this.Output_Graph_Type = Output_Graph_Type;
        this.Output_Graph_Conf_File = Output_Graph_Conf_File;
        this.Run_Mode = Run_Mode;
        this.Run_Mode_Conf_File = Run_Mode_Conf_File;
        this.Input_Vertex_CSV_File_Path = Input_Vertex_CSV_File_Path;
        this.Vertex_Name_Column = Vertex_Name_Column;
        this.Vertex_Property_Columns = Vertex_Property_Columns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopCSVFileToGraph", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopCSVFileToGraph_args args = new GopCSVFileToGraph_args();
        args.setInput_Edge_CSV_File_Path(Input_Edge_CSV_File_Path);
        args.setEdge_Src_Column(Edge_Src_Column);
        args.setEdge_Dst_Column(Edge_Dst_Column);
        args.setEdge_Property_Columns(Edge_Property_Columns);
        args.setDirected(Directed);
        args.setOutput_Graph_Type(Output_Graph_Type);
        args.setOutput_Graph_Conf_File(Output_Graph_Conf_File);
        args.setRun_Mode(Run_Mode);
        args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
        args.setInput_Vertex_CSV_File_Path(Input_Vertex_CSV_File_Path);
        args.setVertex_Name_Column(Vertex_Name_Column);
        args.setVertex_Property_Columns(Vertex_Property_Columns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GopCSVFileToGraph();
      }
    }

    public void GopLabelPropagation(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopLabelPropagation_call method_call = new GopLabelPropagation_call(Input_Graph_Type, Input_Graph_Conf_File, Result_Property_Name, Run_Mode, Run_Mode_Conf_File, Output_Graph_Type, Output_Graph_Conf_File, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopLabelPropagation_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String Input_Graph_Type;
      private String Input_Graph_Conf_File;
      private String Result_Property_Name;
      private String Run_Mode;
      private String Run_Mode_Conf_File;
      private String Output_Graph_Type;
      private String Output_Graph_Conf_File;
      public GopLabelPropagation_call(String Input_Graph_Type, String Input_Graph_Conf_File, String Result_Property_Name, String Run_Mode, String Run_Mode_Conf_File, String Output_Graph_Type, String Output_Graph_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Input_Graph_Type = Input_Graph_Type;
        this.Input_Graph_Conf_File = Input_Graph_Conf_File;
        this.Result_Property_Name = Result_Property_Name;
        this.Run_Mode = Run_Mode;
        this.Run_Mode_Conf_File = Run_Mode_Conf_File;
        this.Output_Graph_Type = Output_Graph_Type;
        this.Output_Graph_Conf_File = Output_Graph_Conf_File;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopLabelPropagation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopLabelPropagation_args args = new GopLabelPropagation_args();
        args.setInput_Graph_Type(Input_Graph_Type);
        args.setInput_Graph_Conf_File(Input_Graph_Conf_File);
        args.setResult_Property_Name(Result_Property_Name);
        args.setRun_Mode(Run_Mode);
        args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
        args.setOutput_Graph_Type(Output_Graph_Type);
        args.setOutput_Graph_Conf_File(Output_Graph_Conf_File);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GopLabelPropagation();
      }
    }

    public void GopGraphToCSVFile(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GopGraphToCSVFile_call method_call = new GopGraphToCSVFile_call(Input_Graph_Type, Input_Graph_Conf_File, Vertex_Property_Names, Output_Vertex_CSV_File, Edge_Property_Names, Output_Edge_CSV_File, Run_Mode, Run_Mode_Conf_File, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GopGraphToCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String Input_Graph_Type;
      private String Input_Graph_Conf_File;
      private String Vertex_Property_Names;
      private String Output_Vertex_CSV_File;
      private String Edge_Property_Names;
      private String Output_Edge_CSV_File;
      private String Run_Mode;
      private String Run_Mode_Conf_File;
      public GopGraphToCSVFile_call(String Input_Graph_Type, String Input_Graph_Conf_File, String Vertex_Property_Names, String Output_Vertex_CSV_File, String Edge_Property_Names, String Output_Edge_CSV_File, String Run_Mode, String Run_Mode_Conf_File, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Input_Graph_Type = Input_Graph_Type;
        this.Input_Graph_Conf_File = Input_Graph_Conf_File;
        this.Vertex_Property_Names = Vertex_Property_Names;
        this.Output_Vertex_CSV_File = Output_Vertex_CSV_File;
        this.Edge_Property_Names = Edge_Property_Names;
        this.Output_Edge_CSV_File = Output_Edge_CSV_File;
        this.Run_Mode = Run_Mode;
        this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GopGraphToCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GopGraphToCSVFile_args args = new GopGraphToCSVFile_args();
        args.setInput_Graph_Type(Input_Graph_Type);
        args.setInput_Graph_Conf_File(Input_Graph_Conf_File);
        args.setVertex_Property_Names(Vertex_Property_Names);
        args.setOutput_Vertex_CSV_File(Output_Vertex_CSV_File);
        args.setEdge_Property_Names(Edge_Property_Names);
        args.setOutput_Edge_CSV_File(Output_Edge_CSV_File);
        args.setRun_Mode(Run_Mode);
        args.setRun_Mode_Conf_File(Run_Mode_Conf_File);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GopGraphToCSVFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GopCSVFileToGraph", new GopCSVFileToGraph());
      processMap.put("GopLabelPropagation", new GopLabelPropagation());
      processMap.put("GopGraphToCSVFile", new GopGraphToCSVFile());
      return processMap;
    }

    public static class GopCSVFileToGraph<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopCSVFileToGraph_args> {
      public GopCSVFileToGraph() {
        super("GopCSVFileToGraph");
      }

      public GopCSVFileToGraph_args getEmptyArgsInstance() {
        return new GopCSVFileToGraph_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopCSVFileToGraph_result getResult(I iface, GopCSVFileToGraph_args args) throws org.apache.thrift.TException {
        GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
        try {
          result.success = iface.GopCSVFileToGraph(args.Input_Edge_CSV_File_Path, args.Edge_Src_Column, args.Edge_Dst_Column, args.Edge_Property_Columns, args.Directed, args.Output_Graph_Type, args.Output_Graph_Conf_File, args.Run_Mode, args.Run_Mode_Conf_File, args.Input_Vertex_CSV_File_Path, args.Vertex_Name_Column, args.Vertex_Property_Columns);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

    public static class GopLabelPropagation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopLabelPropagation_args> {
      public GopLabelPropagation() {
        super("GopLabelPropagation");
      }

      public GopLabelPropagation_args getEmptyArgsInstance() {
        return new GopLabelPropagation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopLabelPropagation_result getResult(I iface, GopLabelPropagation_args args) throws org.apache.thrift.TException {
        GopLabelPropagation_result result = new GopLabelPropagation_result();
        try {
          result.success = iface.GopLabelPropagation(args.Input_Graph_Type, args.Input_Graph_Conf_File, args.Result_Property_Name, args.Run_Mode, args.Run_Mode_Conf_File, args.Output_Graph_Type, args.Output_Graph_Conf_File);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

    public static class GopGraphToCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GopGraphToCSVFile_args> {
      public GopGraphToCSVFile() {
        super("GopGraphToCSVFile");
      }

      public GopGraphToCSVFile_args getEmptyArgsInstance() {
        return new GopGraphToCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public GopGraphToCSVFile_result getResult(I iface, GopGraphToCSVFile_args args) throws org.apache.thrift.TException {
        GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
        try {
          result.success = iface.GopGraphToCSVFile(args.Input_Graph_Type, args.Input_Graph_Conf_File, args.Vertex_Property_Names, args.Output_Vertex_CSV_File, args.Edge_Property_Names, args.Output_Edge_CSV_File, args.Run_Mode, args.Run_Mode_Conf_File);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GopCSVFileToGraph", new GopCSVFileToGraph());
      processMap.put("GopLabelPropagation", new GopLabelPropagation());
      processMap.put("GopGraphToCSVFile", new GopGraphToCSVFile());
      return processMap;
    }

    public static class GopCSVFileToGraph<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopCSVFileToGraph_args, String> {
      public GopCSVFileToGraph() {
        super("GopCSVFileToGraph");
      }

      public GopCSVFileToGraph_args getEmptyArgsInstance() {
        return new GopCSVFileToGraph_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopCSVFileToGraph_result result = new GopCSVFileToGraph_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopCSVFileToGraph_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.GopCSVFileToGraph(args.Input_Edge_CSV_File_Path, args.Edge_Src_Column, args.Edge_Dst_Column, args.Edge_Property_Columns, args.Directed, args.Output_Graph_Type, args.Output_Graph_Conf_File, args.Run_Mode, args.Run_Mode_Conf_File, args.Input_Vertex_CSV_File_Path, args.Vertex_Name_Column, args.Vertex_Property_Columns,resultHandler);
      }
    }

    public static class GopLabelPropagation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopLabelPropagation_args, String> {
      public GopLabelPropagation() {
        super("GopLabelPropagation");
      }

      public GopLabelPropagation_args getEmptyArgsInstance() {
        return new GopLabelPropagation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            GopLabelPropagation_result result = new GopLabelPropagation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopLabelPropagation_result result = new GopLabelPropagation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopLabelPropagation_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.GopLabelPropagation(args.Input_Graph_Type, args.Input_Graph_Conf_File, args.Result_Property_Name, args.Run_Mode, args.Run_Mode_Conf_File, args.Output_Graph_Type, args.Output_Graph_Conf_File,resultHandler);
      }
    }

    public static class GopGraphToCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GopGraphToCSVFile_args, String> {
      public GopGraphToCSVFile() {
        super("GopGraphToCSVFile");
      }

      public GopGraphToCSVFile_args getEmptyArgsInstance() {
        return new GopGraphToCSVFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GopGraphToCSVFile_result result = new GopGraphToCSVFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GopGraphToCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.GopGraphToCSVFile(args.Input_Graph_Type, args.Input_Graph_Conf_File, args.Vertex_Property_Names, args.Output_Vertex_CSV_File, args.Edge_Property_Names, args.Output_Edge_CSV_File, args.Run_Mode, args.Run_Mode_Conf_File,resultHandler);
      }
    }

  }

  public static class GopCSVFileToGraph_args implements org.apache.thrift.TBase<GopCSVFileToGraph_args, GopCSVFileToGraph_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopCSVFileToGraph_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopCSVFileToGraph_args");

    private static final org.apache.thrift.protocol.TField INPUT__EDGE__CSV__FILE__PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Edge_CSV_File_Path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE__SRC__COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("Edge_Src_Column", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EDGE__DST__COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("Edge_Dst_Column", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EDGE__PROPERTY__COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("Edge_Property_Columns", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DIRECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("Directed", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OUTPUT__GRAPH__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Graph_Type", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField OUTPUT__GRAPH__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Graph_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField RUN__MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField RUN__MODE__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField INPUT__VERTEX__CSV__FILE__PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Vertex_CSV_File_Path", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField VERTEX__NAME__COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("Vertex_Name_Column", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField VERTEX__PROPERTY__COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("Vertex_Property_Columns", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopCSVFileToGraph_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopCSVFileToGraph_argsTupleSchemeFactory();

    public String Input_Edge_CSV_File_Path; // required
    public String Edge_Src_Column; // required
    public String Edge_Dst_Column; // required
    public String Edge_Property_Columns; // required
    public String Directed; // required
    public String Output_Graph_Type; // required
    public String Output_Graph_Conf_File; // required
    public String Run_Mode; // required
    public String Run_Mode_Conf_File; // required
    public String Input_Vertex_CSV_File_Path; // required
    public String Vertex_Name_Column; // required
    public String Vertex_Property_Columns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT__EDGE__CSV__FILE__PATH((short)1, "Input_Edge_CSV_File_Path"),
      EDGE__SRC__COLUMN((short)2, "Edge_Src_Column"),
      EDGE__DST__COLUMN((short)3, "Edge_Dst_Column"),
      EDGE__PROPERTY__COLUMNS((short)4, "Edge_Property_Columns"),
      DIRECTED((short)5, "Directed"),
      OUTPUT__GRAPH__TYPE((short)6, "Output_Graph_Type"),
      OUTPUT__GRAPH__CONF__FILE((short)7, "Output_Graph_Conf_File"),
      RUN__MODE((short)8, "Run_Mode"),
      RUN__MODE__CONF__FILE((short)9, "Run_Mode_Conf_File"),
      INPUT__VERTEX__CSV__FILE__PATH((short)10, "Input_Vertex_CSV_File_Path"),
      VERTEX__NAME__COLUMN((short)11, "Vertex_Name_Column"),
      VERTEX__PROPERTY__COLUMNS((short)12, "Vertex_Property_Columns");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT__EDGE__CSV__FILE__PATH
            return INPUT__EDGE__CSV__FILE__PATH;
          case 2: // EDGE__SRC__COLUMN
            return EDGE__SRC__COLUMN;
          case 3: // EDGE__DST__COLUMN
            return EDGE__DST__COLUMN;
          case 4: // EDGE__PROPERTY__COLUMNS
            return EDGE__PROPERTY__COLUMNS;
          case 5: // DIRECTED
            return DIRECTED;
          case 6: // OUTPUT__GRAPH__TYPE
            return OUTPUT__GRAPH__TYPE;
          case 7: // OUTPUT__GRAPH__CONF__FILE
            return OUTPUT__GRAPH__CONF__FILE;
          case 8: // RUN__MODE
            return RUN__MODE;
          case 9: // RUN__MODE__CONF__FILE
            return RUN__MODE__CONF__FILE;
          case 10: // INPUT__VERTEX__CSV__FILE__PATH
            return INPUT__VERTEX__CSV__FILE__PATH;
          case 11: // VERTEX__NAME__COLUMN
            return VERTEX__NAME__COLUMN;
          case 12: // VERTEX__PROPERTY__COLUMNS
            return VERTEX__PROPERTY__COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT__EDGE__CSV__FILE__PATH, new org.apache.thrift.meta_data.FieldMetaData("Input_Edge_CSV_File_Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EDGE__SRC__COLUMN, new org.apache.thrift.meta_data.FieldMetaData("Edge_Src_Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EDGE__DST__COLUMN, new org.apache.thrift.meta_data.FieldMetaData("Edge_Dst_Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EDGE__PROPERTY__COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("Edge_Property_Columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIRECTED, new org.apache.thrift.meta_data.FieldMetaData("Directed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__GRAPH__TYPE, new org.apache.thrift.meta_data.FieldMetaData("Output_Graph_Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__GRAPH__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Output_Graph_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT__VERTEX__CSV__FILE__PATH, new org.apache.thrift.meta_data.FieldMetaData("Input_Vertex_CSV_File_Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERTEX__NAME__COLUMN, new org.apache.thrift.meta_data.FieldMetaData("Vertex_Name_Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERTEX__PROPERTY__COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("Vertex_Property_Columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopCSVFileToGraph_args.class, metaDataMap);
    }

    public GopCSVFileToGraph_args() {
    }

    public GopCSVFileToGraph_args(
      String Input_Edge_CSV_File_Path,
      String Edge_Src_Column,
      String Edge_Dst_Column,
      String Edge_Property_Columns,
      String Directed,
      String Output_Graph_Type,
      String Output_Graph_Conf_File,
      String Run_Mode,
      String Run_Mode_Conf_File,
      String Input_Vertex_CSV_File_Path,
      String Vertex_Name_Column,
      String Vertex_Property_Columns)
    {
      this();
      this.Input_Edge_CSV_File_Path = Input_Edge_CSV_File_Path;
      this.Edge_Src_Column = Edge_Src_Column;
      this.Edge_Dst_Column = Edge_Dst_Column;
      this.Edge_Property_Columns = Edge_Property_Columns;
      this.Directed = Directed;
      this.Output_Graph_Type = Output_Graph_Type;
      this.Output_Graph_Conf_File = Output_Graph_Conf_File;
      this.Run_Mode = Run_Mode;
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      this.Input_Vertex_CSV_File_Path = Input_Vertex_CSV_File_Path;
      this.Vertex_Name_Column = Vertex_Name_Column;
      this.Vertex_Property_Columns = Vertex_Property_Columns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopCSVFileToGraph_args(GopCSVFileToGraph_args other) {
      if (other.isSetInput_Edge_CSV_File_Path()) {
        this.Input_Edge_CSV_File_Path = other.Input_Edge_CSV_File_Path;
      }
      if (other.isSetEdge_Src_Column()) {
        this.Edge_Src_Column = other.Edge_Src_Column;
      }
      if (other.isSetEdge_Dst_Column()) {
        this.Edge_Dst_Column = other.Edge_Dst_Column;
      }
      if (other.isSetEdge_Property_Columns()) {
        this.Edge_Property_Columns = other.Edge_Property_Columns;
      }
      if (other.isSetDirected()) {
        this.Directed = other.Directed;
      }
      if (other.isSetOutput_Graph_Type()) {
        this.Output_Graph_Type = other.Output_Graph_Type;
      }
      if (other.isSetOutput_Graph_Conf_File()) {
        this.Output_Graph_Conf_File = other.Output_Graph_Conf_File;
      }
      if (other.isSetRun_Mode()) {
        this.Run_Mode = other.Run_Mode;
      }
      if (other.isSetRun_Mode_Conf_File()) {
        this.Run_Mode_Conf_File = other.Run_Mode_Conf_File;
      }
      if (other.isSetInput_Vertex_CSV_File_Path()) {
        this.Input_Vertex_CSV_File_Path = other.Input_Vertex_CSV_File_Path;
      }
      if (other.isSetVertex_Name_Column()) {
        this.Vertex_Name_Column = other.Vertex_Name_Column;
      }
      if (other.isSetVertex_Property_Columns()) {
        this.Vertex_Property_Columns = other.Vertex_Property_Columns;
      }
    }

    public GopCSVFileToGraph_args deepCopy() {
      return new GopCSVFileToGraph_args(this);
    }

    @Override
    public void clear() {
      this.Input_Edge_CSV_File_Path = null;
      this.Edge_Src_Column = null;
      this.Edge_Dst_Column = null;
      this.Edge_Property_Columns = null;
      this.Directed = null;
      this.Output_Graph_Type = null;
      this.Output_Graph_Conf_File = null;
      this.Run_Mode = null;
      this.Run_Mode_Conf_File = null;
      this.Input_Vertex_CSV_File_Path = null;
      this.Vertex_Name_Column = null;
      this.Vertex_Property_Columns = null;
    }

    public String getInput_Edge_CSV_File_Path() {
      return this.Input_Edge_CSV_File_Path;
    }

    public GopCSVFileToGraph_args setInput_Edge_CSV_File_Path(String Input_Edge_CSV_File_Path) {
      this.Input_Edge_CSV_File_Path = Input_Edge_CSV_File_Path;
      return this;
    }

    public void unsetInput_Edge_CSV_File_Path() {
      this.Input_Edge_CSV_File_Path = null;
    }

    /** Returns true if field Input_Edge_CSV_File_Path is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Edge_CSV_File_Path() {
      return this.Input_Edge_CSV_File_Path != null;
    }

    public void setInput_Edge_CSV_File_PathIsSet(boolean value) {
      if (!value) {
        this.Input_Edge_CSV_File_Path = null;
      }
    }

    public String getEdge_Src_Column() {
      return this.Edge_Src_Column;
    }

    public GopCSVFileToGraph_args setEdge_Src_Column(String Edge_Src_Column) {
      this.Edge_Src_Column = Edge_Src_Column;
      return this;
    }

    public void unsetEdge_Src_Column() {
      this.Edge_Src_Column = null;
    }

    /** Returns true if field Edge_Src_Column is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge_Src_Column() {
      return this.Edge_Src_Column != null;
    }

    public void setEdge_Src_ColumnIsSet(boolean value) {
      if (!value) {
        this.Edge_Src_Column = null;
      }
    }

    public String getEdge_Dst_Column() {
      return this.Edge_Dst_Column;
    }

    public GopCSVFileToGraph_args setEdge_Dst_Column(String Edge_Dst_Column) {
      this.Edge_Dst_Column = Edge_Dst_Column;
      return this;
    }

    public void unsetEdge_Dst_Column() {
      this.Edge_Dst_Column = null;
    }

    /** Returns true if field Edge_Dst_Column is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge_Dst_Column() {
      return this.Edge_Dst_Column != null;
    }

    public void setEdge_Dst_ColumnIsSet(boolean value) {
      if (!value) {
        this.Edge_Dst_Column = null;
      }
    }

    public String getEdge_Property_Columns() {
      return this.Edge_Property_Columns;
    }

    public GopCSVFileToGraph_args setEdge_Property_Columns(String Edge_Property_Columns) {
      this.Edge_Property_Columns = Edge_Property_Columns;
      return this;
    }

    public void unsetEdge_Property_Columns() {
      this.Edge_Property_Columns = null;
    }

    /** Returns true if field Edge_Property_Columns is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge_Property_Columns() {
      return this.Edge_Property_Columns != null;
    }

    public void setEdge_Property_ColumnsIsSet(boolean value) {
      if (!value) {
        this.Edge_Property_Columns = null;
      }
    }

    public String getDirected() {
      return this.Directed;
    }

    public GopCSVFileToGraph_args setDirected(String Directed) {
      this.Directed = Directed;
      return this;
    }

    public void unsetDirected() {
      this.Directed = null;
    }

    /** Returns true if field Directed is set (has been assigned a value) and false otherwise */
    public boolean isSetDirected() {
      return this.Directed != null;
    }

    public void setDirectedIsSet(boolean value) {
      if (!value) {
        this.Directed = null;
      }
    }

    public String getOutput_Graph_Type() {
      return this.Output_Graph_Type;
    }

    public GopCSVFileToGraph_args setOutput_Graph_Type(String Output_Graph_Type) {
      this.Output_Graph_Type = Output_Graph_Type;
      return this;
    }

    public void unsetOutput_Graph_Type() {
      this.Output_Graph_Type = null;
    }

    /** Returns true if field Output_Graph_Type is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Graph_Type() {
      return this.Output_Graph_Type != null;
    }

    public void setOutput_Graph_TypeIsSet(boolean value) {
      if (!value) {
        this.Output_Graph_Type = null;
      }
    }

    public String getOutput_Graph_Conf_File() {
      return this.Output_Graph_Conf_File;
    }

    public GopCSVFileToGraph_args setOutput_Graph_Conf_File(String Output_Graph_Conf_File) {
      this.Output_Graph_Conf_File = Output_Graph_Conf_File;
      return this;
    }

    public void unsetOutput_Graph_Conf_File() {
      this.Output_Graph_Conf_File = null;
    }

    /** Returns true if field Output_Graph_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Graph_Conf_File() {
      return this.Output_Graph_Conf_File != null;
    }

    public void setOutput_Graph_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Output_Graph_Conf_File = null;
      }
    }

    public String getRun_Mode() {
      return this.Run_Mode;
    }

    public GopCSVFileToGraph_args setRun_Mode(String Run_Mode) {
      this.Run_Mode = Run_Mode;
      return this;
    }

    public void unsetRun_Mode() {
      this.Run_Mode = null;
    }

    /** Returns true if field Run_Mode is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode() {
      return this.Run_Mode != null;
    }

    public void setRun_ModeIsSet(boolean value) {
      if (!value) {
        this.Run_Mode = null;
      }
    }

    public String getRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File;
    }

    public GopCSVFileToGraph_args setRun_Mode_Conf_File(String Run_Mode_Conf_File) {
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      return this;
    }

    public void unsetRun_Mode_Conf_File() {
      this.Run_Mode_Conf_File = null;
    }

    /** Returns true if field Run_Mode_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File != null;
    }

    public void setRun_Mode_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Run_Mode_Conf_File = null;
      }
    }

    public String getInput_Vertex_CSV_File_Path() {
      return this.Input_Vertex_CSV_File_Path;
    }

    public GopCSVFileToGraph_args setInput_Vertex_CSV_File_Path(String Input_Vertex_CSV_File_Path) {
      this.Input_Vertex_CSV_File_Path = Input_Vertex_CSV_File_Path;
      return this;
    }

    public void unsetInput_Vertex_CSV_File_Path() {
      this.Input_Vertex_CSV_File_Path = null;
    }

    /** Returns true if field Input_Vertex_CSV_File_Path is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Vertex_CSV_File_Path() {
      return this.Input_Vertex_CSV_File_Path != null;
    }

    public void setInput_Vertex_CSV_File_PathIsSet(boolean value) {
      if (!value) {
        this.Input_Vertex_CSV_File_Path = null;
      }
    }

    public String getVertex_Name_Column() {
      return this.Vertex_Name_Column;
    }

    public GopCSVFileToGraph_args setVertex_Name_Column(String Vertex_Name_Column) {
      this.Vertex_Name_Column = Vertex_Name_Column;
      return this;
    }

    public void unsetVertex_Name_Column() {
      this.Vertex_Name_Column = null;
    }

    /** Returns true if field Vertex_Name_Column is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex_Name_Column() {
      return this.Vertex_Name_Column != null;
    }

    public void setVertex_Name_ColumnIsSet(boolean value) {
      if (!value) {
        this.Vertex_Name_Column = null;
      }
    }

    public String getVertex_Property_Columns() {
      return this.Vertex_Property_Columns;
    }

    public GopCSVFileToGraph_args setVertex_Property_Columns(String Vertex_Property_Columns) {
      this.Vertex_Property_Columns = Vertex_Property_Columns;
      return this;
    }

    public void unsetVertex_Property_Columns() {
      this.Vertex_Property_Columns = null;
    }

    /** Returns true if field Vertex_Property_Columns is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex_Property_Columns() {
      return this.Vertex_Property_Columns != null;
    }

    public void setVertex_Property_ColumnsIsSet(boolean value) {
      if (!value) {
        this.Vertex_Property_Columns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT__EDGE__CSV__FILE__PATH:
        if (value == null) {
          unsetInput_Edge_CSV_File_Path();
        } else {
          setInput_Edge_CSV_File_Path((String)value);
        }
        break;

      case EDGE__SRC__COLUMN:
        if (value == null) {
          unsetEdge_Src_Column();
        } else {
          setEdge_Src_Column((String)value);
        }
        break;

      case EDGE__DST__COLUMN:
        if (value == null) {
          unsetEdge_Dst_Column();
        } else {
          setEdge_Dst_Column((String)value);
        }
        break;

      case EDGE__PROPERTY__COLUMNS:
        if (value == null) {
          unsetEdge_Property_Columns();
        } else {
          setEdge_Property_Columns((String)value);
        }
        break;

      case DIRECTED:
        if (value == null) {
          unsetDirected();
        } else {
          setDirected((String)value);
        }
        break;

      case OUTPUT__GRAPH__TYPE:
        if (value == null) {
          unsetOutput_Graph_Type();
        } else {
          setOutput_Graph_Type((String)value);
        }
        break;

      case OUTPUT__GRAPH__CONF__FILE:
        if (value == null) {
          unsetOutput_Graph_Conf_File();
        } else {
          setOutput_Graph_Conf_File((String)value);
        }
        break;

      case RUN__MODE:
        if (value == null) {
          unsetRun_Mode();
        } else {
          setRun_Mode((String)value);
        }
        break;

      case RUN__MODE__CONF__FILE:
        if (value == null) {
          unsetRun_Mode_Conf_File();
        } else {
          setRun_Mode_Conf_File((String)value);
        }
        break;

      case INPUT__VERTEX__CSV__FILE__PATH:
        if (value == null) {
          unsetInput_Vertex_CSV_File_Path();
        } else {
          setInput_Vertex_CSV_File_Path((String)value);
        }
        break;

      case VERTEX__NAME__COLUMN:
        if (value == null) {
          unsetVertex_Name_Column();
        } else {
          setVertex_Name_Column((String)value);
        }
        break;

      case VERTEX__PROPERTY__COLUMNS:
        if (value == null) {
          unsetVertex_Property_Columns();
        } else {
          setVertex_Property_Columns((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT__EDGE__CSV__FILE__PATH:
        return getInput_Edge_CSV_File_Path();

      case EDGE__SRC__COLUMN:
        return getEdge_Src_Column();

      case EDGE__DST__COLUMN:
        return getEdge_Dst_Column();

      case EDGE__PROPERTY__COLUMNS:
        return getEdge_Property_Columns();

      case DIRECTED:
        return getDirected();

      case OUTPUT__GRAPH__TYPE:
        return getOutput_Graph_Type();

      case OUTPUT__GRAPH__CONF__FILE:
        return getOutput_Graph_Conf_File();

      case RUN__MODE:
        return getRun_Mode();

      case RUN__MODE__CONF__FILE:
        return getRun_Mode_Conf_File();

      case INPUT__VERTEX__CSV__FILE__PATH:
        return getInput_Vertex_CSV_File_Path();

      case VERTEX__NAME__COLUMN:
        return getVertex_Name_Column();

      case VERTEX__PROPERTY__COLUMNS:
        return getVertex_Property_Columns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT__EDGE__CSV__FILE__PATH:
        return isSetInput_Edge_CSV_File_Path();
      case EDGE__SRC__COLUMN:
        return isSetEdge_Src_Column();
      case EDGE__DST__COLUMN:
        return isSetEdge_Dst_Column();
      case EDGE__PROPERTY__COLUMNS:
        return isSetEdge_Property_Columns();
      case DIRECTED:
        return isSetDirected();
      case OUTPUT__GRAPH__TYPE:
        return isSetOutput_Graph_Type();
      case OUTPUT__GRAPH__CONF__FILE:
        return isSetOutput_Graph_Conf_File();
      case RUN__MODE:
        return isSetRun_Mode();
      case RUN__MODE__CONF__FILE:
        return isSetRun_Mode_Conf_File();
      case INPUT__VERTEX__CSV__FILE__PATH:
        return isSetInput_Vertex_CSV_File_Path();
      case VERTEX__NAME__COLUMN:
        return isSetVertex_Name_Column();
      case VERTEX__PROPERTY__COLUMNS:
        return isSetVertex_Property_Columns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopCSVFileToGraph_args)
        return this.equals((GopCSVFileToGraph_args)that);
      return false;
    }

    public boolean equals(GopCSVFileToGraph_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_Input_Edge_CSV_File_Path = true && this.isSetInput_Edge_CSV_File_Path();
      boolean that_present_Input_Edge_CSV_File_Path = true && that.isSetInput_Edge_CSV_File_Path();
      if (this_present_Input_Edge_CSV_File_Path || that_present_Input_Edge_CSV_File_Path) {
        if (!(this_present_Input_Edge_CSV_File_Path && that_present_Input_Edge_CSV_File_Path))
          return false;
        if (!this.Input_Edge_CSV_File_Path.equals(that.Input_Edge_CSV_File_Path))
          return false;
      }

      boolean this_present_Edge_Src_Column = true && this.isSetEdge_Src_Column();
      boolean that_present_Edge_Src_Column = true && that.isSetEdge_Src_Column();
      if (this_present_Edge_Src_Column || that_present_Edge_Src_Column) {
        if (!(this_present_Edge_Src_Column && that_present_Edge_Src_Column))
          return false;
        if (!this.Edge_Src_Column.equals(that.Edge_Src_Column))
          return false;
      }

      boolean this_present_Edge_Dst_Column = true && this.isSetEdge_Dst_Column();
      boolean that_present_Edge_Dst_Column = true && that.isSetEdge_Dst_Column();
      if (this_present_Edge_Dst_Column || that_present_Edge_Dst_Column) {
        if (!(this_present_Edge_Dst_Column && that_present_Edge_Dst_Column))
          return false;
        if (!this.Edge_Dst_Column.equals(that.Edge_Dst_Column))
          return false;
      }

      boolean this_present_Edge_Property_Columns = true && this.isSetEdge_Property_Columns();
      boolean that_present_Edge_Property_Columns = true && that.isSetEdge_Property_Columns();
      if (this_present_Edge_Property_Columns || that_present_Edge_Property_Columns) {
        if (!(this_present_Edge_Property_Columns && that_present_Edge_Property_Columns))
          return false;
        if (!this.Edge_Property_Columns.equals(that.Edge_Property_Columns))
          return false;
      }

      boolean this_present_Directed = true && this.isSetDirected();
      boolean that_present_Directed = true && that.isSetDirected();
      if (this_present_Directed || that_present_Directed) {
        if (!(this_present_Directed && that_present_Directed))
          return false;
        if (!this.Directed.equals(that.Directed))
          return false;
      }

      boolean this_present_Output_Graph_Type = true && this.isSetOutput_Graph_Type();
      boolean that_present_Output_Graph_Type = true && that.isSetOutput_Graph_Type();
      if (this_present_Output_Graph_Type || that_present_Output_Graph_Type) {
        if (!(this_present_Output_Graph_Type && that_present_Output_Graph_Type))
          return false;
        if (!this.Output_Graph_Type.equals(that.Output_Graph_Type))
          return false;
      }

      boolean this_present_Output_Graph_Conf_File = true && this.isSetOutput_Graph_Conf_File();
      boolean that_present_Output_Graph_Conf_File = true && that.isSetOutput_Graph_Conf_File();
      if (this_present_Output_Graph_Conf_File || that_present_Output_Graph_Conf_File) {
        if (!(this_present_Output_Graph_Conf_File && that_present_Output_Graph_Conf_File))
          return false;
        if (!this.Output_Graph_Conf_File.equals(that.Output_Graph_Conf_File))
          return false;
      }

      boolean this_present_Run_Mode = true && this.isSetRun_Mode();
      boolean that_present_Run_Mode = true && that.isSetRun_Mode();
      if (this_present_Run_Mode || that_present_Run_Mode) {
        if (!(this_present_Run_Mode && that_present_Run_Mode))
          return false;
        if (!this.Run_Mode.equals(that.Run_Mode))
          return false;
      }

      boolean this_present_Run_Mode_Conf_File = true && this.isSetRun_Mode_Conf_File();
      boolean that_present_Run_Mode_Conf_File = true && that.isSetRun_Mode_Conf_File();
      if (this_present_Run_Mode_Conf_File || that_present_Run_Mode_Conf_File) {
        if (!(this_present_Run_Mode_Conf_File && that_present_Run_Mode_Conf_File))
          return false;
        if (!this.Run_Mode_Conf_File.equals(that.Run_Mode_Conf_File))
          return false;
      }

      boolean this_present_Input_Vertex_CSV_File_Path = true && this.isSetInput_Vertex_CSV_File_Path();
      boolean that_present_Input_Vertex_CSV_File_Path = true && that.isSetInput_Vertex_CSV_File_Path();
      if (this_present_Input_Vertex_CSV_File_Path || that_present_Input_Vertex_CSV_File_Path) {
        if (!(this_present_Input_Vertex_CSV_File_Path && that_present_Input_Vertex_CSV_File_Path))
          return false;
        if (!this.Input_Vertex_CSV_File_Path.equals(that.Input_Vertex_CSV_File_Path))
          return false;
      }

      boolean this_present_Vertex_Name_Column = true && this.isSetVertex_Name_Column();
      boolean that_present_Vertex_Name_Column = true && that.isSetVertex_Name_Column();
      if (this_present_Vertex_Name_Column || that_present_Vertex_Name_Column) {
        if (!(this_present_Vertex_Name_Column && that_present_Vertex_Name_Column))
          return false;
        if (!this.Vertex_Name_Column.equals(that.Vertex_Name_Column))
          return false;
      }

      boolean this_present_Vertex_Property_Columns = true && this.isSetVertex_Property_Columns();
      boolean that_present_Vertex_Property_Columns = true && that.isSetVertex_Property_Columns();
      if (this_present_Vertex_Property_Columns || that_present_Vertex_Property_Columns) {
        if (!(this_present_Vertex_Property_Columns && that_present_Vertex_Property_Columns))
          return false;
        if (!this.Vertex_Property_Columns.equals(that.Vertex_Property_Columns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInput_Edge_CSV_File_Path()) ? 131071 : 524287);
      if (isSetInput_Edge_CSV_File_Path())
        hashCode = hashCode * 8191 + Input_Edge_CSV_File_Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetEdge_Src_Column()) ? 131071 : 524287);
      if (isSetEdge_Src_Column())
        hashCode = hashCode * 8191 + Edge_Src_Column.hashCode();

      hashCode = hashCode * 8191 + ((isSetEdge_Dst_Column()) ? 131071 : 524287);
      if (isSetEdge_Dst_Column())
        hashCode = hashCode * 8191 + Edge_Dst_Column.hashCode();

      hashCode = hashCode * 8191 + ((isSetEdge_Property_Columns()) ? 131071 : 524287);
      if (isSetEdge_Property_Columns())
        hashCode = hashCode * 8191 + Edge_Property_Columns.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirected()) ? 131071 : 524287);
      if (isSetDirected())
        hashCode = hashCode * 8191 + Directed.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Graph_Type()) ? 131071 : 524287);
      if (isSetOutput_Graph_Type())
        hashCode = hashCode * 8191 + Output_Graph_Type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Graph_Conf_File()) ? 131071 : 524287);
      if (isSetOutput_Graph_Conf_File())
        hashCode = hashCode * 8191 + Output_Graph_Conf_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode()) ? 131071 : 524287);
      if (isSetRun_Mode())
        hashCode = hashCode * 8191 + Run_Mode.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode_Conf_File()) ? 131071 : 524287);
      if (isSetRun_Mode_Conf_File())
        hashCode = hashCode * 8191 + Run_Mode_Conf_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetInput_Vertex_CSV_File_Path()) ? 131071 : 524287);
      if (isSetInput_Vertex_CSV_File_Path())
        hashCode = hashCode * 8191 + Input_Vertex_CSV_File_Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetVertex_Name_Column()) ? 131071 : 524287);
      if (isSetVertex_Name_Column())
        hashCode = hashCode * 8191 + Vertex_Name_Column.hashCode();

      hashCode = hashCode * 8191 + ((isSetVertex_Property_Columns()) ? 131071 : 524287);
      if (isSetVertex_Property_Columns())
        hashCode = hashCode * 8191 + Vertex_Property_Columns.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopCSVFileToGraph_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInput_Edge_CSV_File_Path()).compareTo(other.isSetInput_Edge_CSV_File_Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Edge_CSV_File_Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Edge_CSV_File_Path, other.Input_Edge_CSV_File_Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEdge_Src_Column()).compareTo(other.isSetEdge_Src_Column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge_Src_Column()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Edge_Src_Column, other.Edge_Src_Column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEdge_Dst_Column()).compareTo(other.isSetEdge_Dst_Column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge_Dst_Column()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Edge_Dst_Column, other.Edge_Dst_Column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEdge_Property_Columns()).compareTo(other.isSetEdge_Property_Columns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge_Property_Columns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Edge_Property_Columns, other.Edge_Property_Columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirected()).compareTo(other.isSetDirected());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirected()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Directed, other.Directed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Graph_Type()).compareTo(other.isSetOutput_Graph_Type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Graph_Type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Graph_Type, other.Output_Graph_Type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Graph_Conf_File()).compareTo(other.isSetOutput_Graph_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Graph_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Graph_Conf_File, other.Output_Graph_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode()).compareTo(other.isSetRun_Mode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode, other.Run_Mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode_Conf_File()).compareTo(other.isSetRun_Mode_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode_Conf_File, other.Run_Mode_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInput_Vertex_CSV_File_Path()).compareTo(other.isSetInput_Vertex_CSV_File_Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Vertex_CSV_File_Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Vertex_CSV_File_Path, other.Input_Vertex_CSV_File_Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex_Name_Column()).compareTo(other.isSetVertex_Name_Column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex_Name_Column()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Vertex_Name_Column, other.Vertex_Name_Column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex_Property_Columns()).compareTo(other.isSetVertex_Property_Columns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex_Property_Columns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Vertex_Property_Columns, other.Vertex_Property_Columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopCSVFileToGraph_args(");
      boolean first = true;

      sb.append("Input_Edge_CSV_File_Path:");
      if (this.Input_Edge_CSV_File_Path == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Edge_CSV_File_Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Edge_Src_Column:");
      if (this.Edge_Src_Column == null) {
        sb.append("null");
      } else {
        sb.append(this.Edge_Src_Column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Edge_Dst_Column:");
      if (this.Edge_Dst_Column == null) {
        sb.append("null");
      } else {
        sb.append(this.Edge_Dst_Column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Edge_Property_Columns:");
      if (this.Edge_Property_Columns == null) {
        sb.append("null");
      } else {
        sb.append(this.Edge_Property_Columns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Directed:");
      if (this.Directed == null) {
        sb.append("null");
      } else {
        sb.append(this.Directed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Graph_Type:");
      if (this.Output_Graph_Type == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Graph_Type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Graph_Conf_File:");
      if (this.Output_Graph_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Graph_Conf_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode:");
      if (this.Run_Mode == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode_Conf_File:");
      if (this.Run_Mode_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode_Conf_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Input_Vertex_CSV_File_Path:");
      if (this.Input_Vertex_CSV_File_Path == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Vertex_CSV_File_Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Vertex_Name_Column:");
      if (this.Vertex_Name_Column == null) {
        sb.append("null");
      } else {
        sb.append(this.Vertex_Name_Column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Vertex_Property_Columns:");
      if (this.Vertex_Property_Columns == null) {
        sb.append("null");
      } else {
        sb.append(this.Vertex_Property_Columns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopCSVFileToGraph_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_argsStandardScheme getScheme() {
        return new GopCSVFileToGraph_argsStandardScheme();
      }
    }

    private static class GopCSVFileToGraph_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopCSVFileToGraph_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT__EDGE__CSV__FILE__PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Edge_CSV_File_Path = iprot.readString();
                struct.setInput_Edge_CSV_File_PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE__SRC__COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Edge_Src_Column = iprot.readString();
                struct.setEdge_Src_ColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EDGE__DST__COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Edge_Dst_Column = iprot.readString();
                struct.setEdge_Dst_ColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EDGE__PROPERTY__COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Edge_Property_Columns = iprot.readString();
                struct.setEdge_Property_ColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DIRECTED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Directed = iprot.readString();
                struct.setDirectedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OUTPUT__GRAPH__TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Graph_Type = iprot.readString();
                struct.setOutput_Graph_TypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OUTPUT__GRAPH__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Graph_Conf_File = iprot.readString();
                struct.setOutput_Graph_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RUN__MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode = iprot.readString();
                struct.setRun_ModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // RUN__MODE__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode_Conf_File = iprot.readString();
                struct.setRun_Mode_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // INPUT__VERTEX__CSV__FILE__PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Vertex_CSV_File_Path = iprot.readString();
                struct.setInput_Vertex_CSV_File_PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // VERTEX__NAME__COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Vertex_Name_Column = iprot.readString();
                struct.setVertex_Name_ColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // VERTEX__PROPERTY__COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Vertex_Property_Columns = iprot.readString();
                struct.setVertex_Property_ColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Input_Edge_CSV_File_Path != null) {
          oprot.writeFieldBegin(INPUT__EDGE__CSV__FILE__PATH_FIELD_DESC);
          oprot.writeString(struct.Input_Edge_CSV_File_Path);
          oprot.writeFieldEnd();
        }
        if (struct.Edge_Src_Column != null) {
          oprot.writeFieldBegin(EDGE__SRC__COLUMN_FIELD_DESC);
          oprot.writeString(struct.Edge_Src_Column);
          oprot.writeFieldEnd();
        }
        if (struct.Edge_Dst_Column != null) {
          oprot.writeFieldBegin(EDGE__DST__COLUMN_FIELD_DESC);
          oprot.writeString(struct.Edge_Dst_Column);
          oprot.writeFieldEnd();
        }
        if (struct.Edge_Property_Columns != null) {
          oprot.writeFieldBegin(EDGE__PROPERTY__COLUMNS_FIELD_DESC);
          oprot.writeString(struct.Edge_Property_Columns);
          oprot.writeFieldEnd();
        }
        if (struct.Directed != null) {
          oprot.writeFieldBegin(DIRECTED_FIELD_DESC);
          oprot.writeString(struct.Directed);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Graph_Type != null) {
          oprot.writeFieldBegin(OUTPUT__GRAPH__TYPE_FIELD_DESC);
          oprot.writeString(struct.Output_Graph_Type);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Graph_Conf_File != null) {
          oprot.writeFieldBegin(OUTPUT__GRAPH__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Output_Graph_Conf_File);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode != null) {
          oprot.writeFieldBegin(RUN__MODE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode_Conf_File != null) {
          oprot.writeFieldBegin(RUN__MODE__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode_Conf_File);
          oprot.writeFieldEnd();
        }
        if (struct.Input_Vertex_CSV_File_Path != null) {
          oprot.writeFieldBegin(INPUT__VERTEX__CSV__FILE__PATH_FIELD_DESC);
          oprot.writeString(struct.Input_Vertex_CSV_File_Path);
          oprot.writeFieldEnd();
        }
        if (struct.Vertex_Name_Column != null) {
          oprot.writeFieldBegin(VERTEX__NAME__COLUMN_FIELD_DESC);
          oprot.writeString(struct.Vertex_Name_Column);
          oprot.writeFieldEnd();
        }
        if (struct.Vertex_Property_Columns != null) {
          oprot.writeFieldBegin(VERTEX__PROPERTY__COLUMNS_FIELD_DESC);
          oprot.writeString(struct.Vertex_Property_Columns);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopCSVFileToGraph_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_argsTupleScheme getScheme() {
        return new GopCSVFileToGraph_argsTupleScheme();
      }
    }

    private static class GopCSVFileToGraph_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopCSVFileToGraph_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInput_Edge_CSV_File_Path()) {
          optionals.set(0);
        }
        if (struct.isSetEdge_Src_Column()) {
          optionals.set(1);
        }
        if (struct.isSetEdge_Dst_Column()) {
          optionals.set(2);
        }
        if (struct.isSetEdge_Property_Columns()) {
          optionals.set(3);
        }
        if (struct.isSetDirected()) {
          optionals.set(4);
        }
        if (struct.isSetOutput_Graph_Type()) {
          optionals.set(5);
        }
        if (struct.isSetOutput_Graph_Conf_File()) {
          optionals.set(6);
        }
        if (struct.isSetRun_Mode()) {
          optionals.set(7);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          optionals.set(8);
        }
        if (struct.isSetInput_Vertex_CSV_File_Path()) {
          optionals.set(9);
        }
        if (struct.isSetVertex_Name_Column()) {
          optionals.set(10);
        }
        if (struct.isSetVertex_Property_Columns()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetInput_Edge_CSV_File_Path()) {
          oprot.writeString(struct.Input_Edge_CSV_File_Path);
        }
        if (struct.isSetEdge_Src_Column()) {
          oprot.writeString(struct.Edge_Src_Column);
        }
        if (struct.isSetEdge_Dst_Column()) {
          oprot.writeString(struct.Edge_Dst_Column);
        }
        if (struct.isSetEdge_Property_Columns()) {
          oprot.writeString(struct.Edge_Property_Columns);
        }
        if (struct.isSetDirected()) {
          oprot.writeString(struct.Directed);
        }
        if (struct.isSetOutput_Graph_Type()) {
          oprot.writeString(struct.Output_Graph_Type);
        }
        if (struct.isSetOutput_Graph_Conf_File()) {
          oprot.writeString(struct.Output_Graph_Conf_File);
        }
        if (struct.isSetRun_Mode()) {
          oprot.writeString(struct.Run_Mode);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          oprot.writeString(struct.Run_Mode_Conf_File);
        }
        if (struct.isSetInput_Vertex_CSV_File_Path()) {
          oprot.writeString(struct.Input_Vertex_CSV_File_Path);
        }
        if (struct.isSetVertex_Name_Column()) {
          oprot.writeString(struct.Vertex_Name_Column);
        }
        if (struct.isSetVertex_Property_Columns()) {
          oprot.writeString(struct.Vertex_Property_Columns);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.Input_Edge_CSV_File_Path = iprot.readString();
          struct.setInput_Edge_CSV_File_PathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.Edge_Src_Column = iprot.readString();
          struct.setEdge_Src_ColumnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.Edge_Dst_Column = iprot.readString();
          struct.setEdge_Dst_ColumnIsSet(true);
        }
        if (incoming.get(3)) {
          struct.Edge_Property_Columns = iprot.readString();
          struct.setEdge_Property_ColumnsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.Directed = iprot.readString();
          struct.setDirectedIsSet(true);
        }
        if (incoming.get(5)) {
          struct.Output_Graph_Type = iprot.readString();
          struct.setOutput_Graph_TypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.Output_Graph_Conf_File = iprot.readString();
          struct.setOutput_Graph_Conf_FileIsSet(true);
        }
        if (incoming.get(7)) {
          struct.Run_Mode = iprot.readString();
          struct.setRun_ModeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.Run_Mode_Conf_File = iprot.readString();
          struct.setRun_Mode_Conf_FileIsSet(true);
        }
        if (incoming.get(9)) {
          struct.Input_Vertex_CSV_File_Path = iprot.readString();
          struct.setInput_Vertex_CSV_File_PathIsSet(true);
        }
        if (incoming.get(10)) {
          struct.Vertex_Name_Column = iprot.readString();
          struct.setVertex_Name_ColumnIsSet(true);
        }
        if (incoming.get(11)) {
          struct.Vertex_Property_Columns = iprot.readString();
          struct.setVertex_Property_ColumnsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopCSVFileToGraph_result implements org.apache.thrift.TBase<GopCSVFileToGraph_result, GopCSVFileToGraph_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopCSVFileToGraph_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopCSVFileToGraph_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopCSVFileToGraph_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopCSVFileToGraph_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopCSVFileToGraph_result.class, metaDataMap);
    }

    public GopCSVFileToGraph_result() {
    }

    public GopCSVFileToGraph_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopCSVFileToGraph_result(GopCSVFileToGraph_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GopCSVFileToGraph_result deepCopy() {
      return new GopCSVFileToGraph_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GopCSVFileToGraph_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopCSVFileToGraph_result)
        return this.equals((GopCSVFileToGraph_result)that);
      return false;
    }

    public boolean equals(GopCSVFileToGraph_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopCSVFileToGraph_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopCSVFileToGraph_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopCSVFileToGraph_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_resultStandardScheme getScheme() {
        return new GopCSVFileToGraph_resultStandardScheme();
      }
    }

    private static class GopCSVFileToGraph_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopCSVFileToGraph_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopCSVFileToGraph_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopCSVFileToGraph_resultTupleScheme getScheme() {
        return new GopCSVFileToGraph_resultTupleScheme();
      }
    }

    private static class GopCSVFileToGraph_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopCSVFileToGraph_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopCSVFileToGraph_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopLabelPropagation_args implements org.apache.thrift.TBase<GopLabelPropagation_args, GopLabelPropagation_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopLabelPropagation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopLabelPropagation_args");

    private static final org.apache.thrift.protocol.TField INPUT__GRAPH__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Graph_Type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT__GRAPH__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Graph_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RESULT__PROPERTY__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Result_Property_Name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RUN__MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RUN__MODE__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OUTPUT__GRAPH__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Graph_Type", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField OUTPUT__GRAPH__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Graph_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopLabelPropagation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopLabelPropagation_argsTupleSchemeFactory();

    public String Input_Graph_Type; // required
    public String Input_Graph_Conf_File; // required
    public String Result_Property_Name; // required
    public String Run_Mode; // required
    public String Run_Mode_Conf_File; // required
    public String Output_Graph_Type; // required
    public String Output_Graph_Conf_File; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT__GRAPH__TYPE((short)1, "Input_Graph_Type"),
      INPUT__GRAPH__CONF__FILE((short)2, "Input_Graph_Conf_File"),
      RESULT__PROPERTY__NAME((short)3, "Result_Property_Name"),
      RUN__MODE((short)4, "Run_Mode"),
      RUN__MODE__CONF__FILE((short)5, "Run_Mode_Conf_File"),
      OUTPUT__GRAPH__TYPE((short)6, "Output_Graph_Type"),
      OUTPUT__GRAPH__CONF__FILE((short)7, "Output_Graph_Conf_File");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT__GRAPH__TYPE
            return INPUT__GRAPH__TYPE;
          case 2: // INPUT__GRAPH__CONF__FILE
            return INPUT__GRAPH__CONF__FILE;
          case 3: // RESULT__PROPERTY__NAME
            return RESULT__PROPERTY__NAME;
          case 4: // RUN__MODE
            return RUN__MODE;
          case 5: // RUN__MODE__CONF__FILE
            return RUN__MODE__CONF__FILE;
          case 6: // OUTPUT__GRAPH__TYPE
            return OUTPUT__GRAPH__TYPE;
          case 7: // OUTPUT__GRAPH__CONF__FILE
            return OUTPUT__GRAPH__CONF__FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT__GRAPH__TYPE, new org.apache.thrift.meta_data.FieldMetaData("Input_Graph_Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT__GRAPH__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Input_Graph_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESULT__PROPERTY__NAME, new org.apache.thrift.meta_data.FieldMetaData("Result_Property_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__GRAPH__TYPE, new org.apache.thrift.meta_data.FieldMetaData("Output_Graph_Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__GRAPH__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Output_Graph_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopLabelPropagation_args.class, metaDataMap);
    }

    public GopLabelPropagation_args() {
    }

    public GopLabelPropagation_args(
      String Input_Graph_Type,
      String Input_Graph_Conf_File,
      String Result_Property_Name,
      String Run_Mode,
      String Run_Mode_Conf_File,
      String Output_Graph_Type,
      String Output_Graph_Conf_File)
    {
      this();
      this.Input_Graph_Type = Input_Graph_Type;
      this.Input_Graph_Conf_File = Input_Graph_Conf_File;
      this.Result_Property_Name = Result_Property_Name;
      this.Run_Mode = Run_Mode;
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      this.Output_Graph_Type = Output_Graph_Type;
      this.Output_Graph_Conf_File = Output_Graph_Conf_File;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopLabelPropagation_args(GopLabelPropagation_args other) {
      if (other.isSetInput_Graph_Type()) {
        this.Input_Graph_Type = other.Input_Graph_Type;
      }
      if (other.isSetInput_Graph_Conf_File()) {
        this.Input_Graph_Conf_File = other.Input_Graph_Conf_File;
      }
      if (other.isSetResult_Property_Name()) {
        this.Result_Property_Name = other.Result_Property_Name;
      }
      if (other.isSetRun_Mode()) {
        this.Run_Mode = other.Run_Mode;
      }
      if (other.isSetRun_Mode_Conf_File()) {
        this.Run_Mode_Conf_File = other.Run_Mode_Conf_File;
      }
      if (other.isSetOutput_Graph_Type()) {
        this.Output_Graph_Type = other.Output_Graph_Type;
      }
      if (other.isSetOutput_Graph_Conf_File()) {
        this.Output_Graph_Conf_File = other.Output_Graph_Conf_File;
      }
    }

    public GopLabelPropagation_args deepCopy() {
      return new GopLabelPropagation_args(this);
    }

    @Override
    public void clear() {
      this.Input_Graph_Type = null;
      this.Input_Graph_Conf_File = null;
      this.Result_Property_Name = null;
      this.Run_Mode = null;
      this.Run_Mode_Conf_File = null;
      this.Output_Graph_Type = null;
      this.Output_Graph_Conf_File = null;
    }

    public String getInput_Graph_Type() {
      return this.Input_Graph_Type;
    }

    public GopLabelPropagation_args setInput_Graph_Type(String Input_Graph_Type) {
      this.Input_Graph_Type = Input_Graph_Type;
      return this;
    }

    public void unsetInput_Graph_Type() {
      this.Input_Graph_Type = null;
    }

    /** Returns true if field Input_Graph_Type is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Graph_Type() {
      return this.Input_Graph_Type != null;
    }

    public void setInput_Graph_TypeIsSet(boolean value) {
      if (!value) {
        this.Input_Graph_Type = null;
      }
    }

    public String getInput_Graph_Conf_File() {
      return this.Input_Graph_Conf_File;
    }

    public GopLabelPropagation_args setInput_Graph_Conf_File(String Input_Graph_Conf_File) {
      this.Input_Graph_Conf_File = Input_Graph_Conf_File;
      return this;
    }

    public void unsetInput_Graph_Conf_File() {
      this.Input_Graph_Conf_File = null;
    }

    /** Returns true if field Input_Graph_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Graph_Conf_File() {
      return this.Input_Graph_Conf_File != null;
    }

    public void setInput_Graph_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Input_Graph_Conf_File = null;
      }
    }

    public String getResult_Property_Name() {
      return this.Result_Property_Name;
    }

    public GopLabelPropagation_args setResult_Property_Name(String Result_Property_Name) {
      this.Result_Property_Name = Result_Property_Name;
      return this;
    }

    public void unsetResult_Property_Name() {
      this.Result_Property_Name = null;
    }

    /** Returns true if field Result_Property_Name is set (has been assigned a value) and false otherwise */
    public boolean isSetResult_Property_Name() {
      return this.Result_Property_Name != null;
    }

    public void setResult_Property_NameIsSet(boolean value) {
      if (!value) {
        this.Result_Property_Name = null;
      }
    }

    public String getRun_Mode() {
      return this.Run_Mode;
    }

    public GopLabelPropagation_args setRun_Mode(String Run_Mode) {
      this.Run_Mode = Run_Mode;
      return this;
    }

    public void unsetRun_Mode() {
      this.Run_Mode = null;
    }

    /** Returns true if field Run_Mode is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode() {
      return this.Run_Mode != null;
    }

    public void setRun_ModeIsSet(boolean value) {
      if (!value) {
        this.Run_Mode = null;
      }
    }

    public String getRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File;
    }

    public GopLabelPropagation_args setRun_Mode_Conf_File(String Run_Mode_Conf_File) {
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      return this;
    }

    public void unsetRun_Mode_Conf_File() {
      this.Run_Mode_Conf_File = null;
    }

    /** Returns true if field Run_Mode_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File != null;
    }

    public void setRun_Mode_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Run_Mode_Conf_File = null;
      }
    }

    public String getOutput_Graph_Type() {
      return this.Output_Graph_Type;
    }

    public GopLabelPropagation_args setOutput_Graph_Type(String Output_Graph_Type) {
      this.Output_Graph_Type = Output_Graph_Type;
      return this;
    }

    public void unsetOutput_Graph_Type() {
      this.Output_Graph_Type = null;
    }

    /** Returns true if field Output_Graph_Type is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Graph_Type() {
      return this.Output_Graph_Type != null;
    }

    public void setOutput_Graph_TypeIsSet(boolean value) {
      if (!value) {
        this.Output_Graph_Type = null;
      }
    }

    public String getOutput_Graph_Conf_File() {
      return this.Output_Graph_Conf_File;
    }

    public GopLabelPropagation_args setOutput_Graph_Conf_File(String Output_Graph_Conf_File) {
      this.Output_Graph_Conf_File = Output_Graph_Conf_File;
      return this;
    }

    public void unsetOutput_Graph_Conf_File() {
      this.Output_Graph_Conf_File = null;
    }

    /** Returns true if field Output_Graph_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Graph_Conf_File() {
      return this.Output_Graph_Conf_File != null;
    }

    public void setOutput_Graph_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Output_Graph_Conf_File = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT__GRAPH__TYPE:
        if (value == null) {
          unsetInput_Graph_Type();
        } else {
          setInput_Graph_Type((String)value);
        }
        break;

      case INPUT__GRAPH__CONF__FILE:
        if (value == null) {
          unsetInput_Graph_Conf_File();
        } else {
          setInput_Graph_Conf_File((String)value);
        }
        break;

      case RESULT__PROPERTY__NAME:
        if (value == null) {
          unsetResult_Property_Name();
        } else {
          setResult_Property_Name((String)value);
        }
        break;

      case RUN__MODE:
        if (value == null) {
          unsetRun_Mode();
        } else {
          setRun_Mode((String)value);
        }
        break;

      case RUN__MODE__CONF__FILE:
        if (value == null) {
          unsetRun_Mode_Conf_File();
        } else {
          setRun_Mode_Conf_File((String)value);
        }
        break;

      case OUTPUT__GRAPH__TYPE:
        if (value == null) {
          unsetOutput_Graph_Type();
        } else {
          setOutput_Graph_Type((String)value);
        }
        break;

      case OUTPUT__GRAPH__CONF__FILE:
        if (value == null) {
          unsetOutput_Graph_Conf_File();
        } else {
          setOutput_Graph_Conf_File((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT__GRAPH__TYPE:
        return getInput_Graph_Type();

      case INPUT__GRAPH__CONF__FILE:
        return getInput_Graph_Conf_File();

      case RESULT__PROPERTY__NAME:
        return getResult_Property_Name();

      case RUN__MODE:
        return getRun_Mode();

      case RUN__MODE__CONF__FILE:
        return getRun_Mode_Conf_File();

      case OUTPUT__GRAPH__TYPE:
        return getOutput_Graph_Type();

      case OUTPUT__GRAPH__CONF__FILE:
        return getOutput_Graph_Conf_File();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT__GRAPH__TYPE:
        return isSetInput_Graph_Type();
      case INPUT__GRAPH__CONF__FILE:
        return isSetInput_Graph_Conf_File();
      case RESULT__PROPERTY__NAME:
        return isSetResult_Property_Name();
      case RUN__MODE:
        return isSetRun_Mode();
      case RUN__MODE__CONF__FILE:
        return isSetRun_Mode_Conf_File();
      case OUTPUT__GRAPH__TYPE:
        return isSetOutput_Graph_Type();
      case OUTPUT__GRAPH__CONF__FILE:
        return isSetOutput_Graph_Conf_File();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopLabelPropagation_args)
        return this.equals((GopLabelPropagation_args)that);
      return false;
    }

    public boolean equals(GopLabelPropagation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_Input_Graph_Type = true && this.isSetInput_Graph_Type();
      boolean that_present_Input_Graph_Type = true && that.isSetInput_Graph_Type();
      if (this_present_Input_Graph_Type || that_present_Input_Graph_Type) {
        if (!(this_present_Input_Graph_Type && that_present_Input_Graph_Type))
          return false;
        if (!this.Input_Graph_Type.equals(that.Input_Graph_Type))
          return false;
      }

      boolean this_present_Input_Graph_Conf_File = true && this.isSetInput_Graph_Conf_File();
      boolean that_present_Input_Graph_Conf_File = true && that.isSetInput_Graph_Conf_File();
      if (this_present_Input_Graph_Conf_File || that_present_Input_Graph_Conf_File) {
        if (!(this_present_Input_Graph_Conf_File && that_present_Input_Graph_Conf_File))
          return false;
        if (!this.Input_Graph_Conf_File.equals(that.Input_Graph_Conf_File))
          return false;
      }

      boolean this_present_Result_Property_Name = true && this.isSetResult_Property_Name();
      boolean that_present_Result_Property_Name = true && that.isSetResult_Property_Name();
      if (this_present_Result_Property_Name || that_present_Result_Property_Name) {
        if (!(this_present_Result_Property_Name && that_present_Result_Property_Name))
          return false;
        if (!this.Result_Property_Name.equals(that.Result_Property_Name))
          return false;
      }

      boolean this_present_Run_Mode = true && this.isSetRun_Mode();
      boolean that_present_Run_Mode = true && that.isSetRun_Mode();
      if (this_present_Run_Mode || that_present_Run_Mode) {
        if (!(this_present_Run_Mode && that_present_Run_Mode))
          return false;
        if (!this.Run_Mode.equals(that.Run_Mode))
          return false;
      }

      boolean this_present_Run_Mode_Conf_File = true && this.isSetRun_Mode_Conf_File();
      boolean that_present_Run_Mode_Conf_File = true && that.isSetRun_Mode_Conf_File();
      if (this_present_Run_Mode_Conf_File || that_present_Run_Mode_Conf_File) {
        if (!(this_present_Run_Mode_Conf_File && that_present_Run_Mode_Conf_File))
          return false;
        if (!this.Run_Mode_Conf_File.equals(that.Run_Mode_Conf_File))
          return false;
      }

      boolean this_present_Output_Graph_Type = true && this.isSetOutput_Graph_Type();
      boolean that_present_Output_Graph_Type = true && that.isSetOutput_Graph_Type();
      if (this_present_Output_Graph_Type || that_present_Output_Graph_Type) {
        if (!(this_present_Output_Graph_Type && that_present_Output_Graph_Type))
          return false;
        if (!this.Output_Graph_Type.equals(that.Output_Graph_Type))
          return false;
      }

      boolean this_present_Output_Graph_Conf_File = true && this.isSetOutput_Graph_Conf_File();
      boolean that_present_Output_Graph_Conf_File = true && that.isSetOutput_Graph_Conf_File();
      if (this_present_Output_Graph_Conf_File || that_present_Output_Graph_Conf_File) {
        if (!(this_present_Output_Graph_Conf_File && that_present_Output_Graph_Conf_File))
          return false;
        if (!this.Output_Graph_Conf_File.equals(that.Output_Graph_Conf_File))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInput_Graph_Type()) ? 131071 : 524287);
      if (isSetInput_Graph_Type())
        hashCode = hashCode * 8191 + Input_Graph_Type.hashCode();

      hashCode = hashCode * 8191 + ((isSetInput_Graph_Conf_File()) ? 131071 : 524287);
      if (isSetInput_Graph_Conf_File())
        hashCode = hashCode * 8191 + Input_Graph_Conf_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetResult_Property_Name()) ? 131071 : 524287);
      if (isSetResult_Property_Name())
        hashCode = hashCode * 8191 + Result_Property_Name.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode()) ? 131071 : 524287);
      if (isSetRun_Mode())
        hashCode = hashCode * 8191 + Run_Mode.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode_Conf_File()) ? 131071 : 524287);
      if (isSetRun_Mode_Conf_File())
        hashCode = hashCode * 8191 + Run_Mode_Conf_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Graph_Type()) ? 131071 : 524287);
      if (isSetOutput_Graph_Type())
        hashCode = hashCode * 8191 + Output_Graph_Type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Graph_Conf_File()) ? 131071 : 524287);
      if (isSetOutput_Graph_Conf_File())
        hashCode = hashCode * 8191 + Output_Graph_Conf_File.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopLabelPropagation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInput_Graph_Type()).compareTo(other.isSetInput_Graph_Type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Graph_Type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Graph_Type, other.Input_Graph_Type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInput_Graph_Conf_File()).compareTo(other.isSetInput_Graph_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Graph_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Graph_Conf_File, other.Input_Graph_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResult_Property_Name()).compareTo(other.isSetResult_Property_Name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult_Property_Name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Result_Property_Name, other.Result_Property_Name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode()).compareTo(other.isSetRun_Mode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode, other.Run_Mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode_Conf_File()).compareTo(other.isSetRun_Mode_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode_Conf_File, other.Run_Mode_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Graph_Type()).compareTo(other.isSetOutput_Graph_Type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Graph_Type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Graph_Type, other.Output_Graph_Type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Graph_Conf_File()).compareTo(other.isSetOutput_Graph_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Graph_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Graph_Conf_File, other.Output_Graph_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopLabelPropagation_args(");
      boolean first = true;

      sb.append("Input_Graph_Type:");
      if (this.Input_Graph_Type == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Graph_Type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Input_Graph_Conf_File:");
      if (this.Input_Graph_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Graph_Conf_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Result_Property_Name:");
      if (this.Result_Property_Name == null) {
        sb.append("null");
      } else {
        sb.append(this.Result_Property_Name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode:");
      if (this.Run_Mode == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode_Conf_File:");
      if (this.Run_Mode_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode_Conf_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Graph_Type:");
      if (this.Output_Graph_Type == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Graph_Type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Graph_Conf_File:");
      if (this.Output_Graph_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Graph_Conf_File);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopLabelPropagation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_argsStandardScheme getScheme() {
        return new GopLabelPropagation_argsStandardScheme();
      }
    }

    private static class GopLabelPropagation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopLabelPropagation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT__GRAPH__TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Graph_Type = iprot.readString();
                struct.setInput_Graph_TypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT__GRAPH__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Graph_Conf_File = iprot.readString();
                struct.setInput_Graph_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESULT__PROPERTY__NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Result_Property_Name = iprot.readString();
                struct.setResult_Property_NameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RUN__MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode = iprot.readString();
                struct.setRun_ModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RUN__MODE__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode_Conf_File = iprot.readString();
                struct.setRun_Mode_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OUTPUT__GRAPH__TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Graph_Type = iprot.readString();
                struct.setOutput_Graph_TypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OUTPUT__GRAPH__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Graph_Conf_File = iprot.readString();
                struct.setOutput_Graph_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Input_Graph_Type != null) {
          oprot.writeFieldBegin(INPUT__GRAPH__TYPE_FIELD_DESC);
          oprot.writeString(struct.Input_Graph_Type);
          oprot.writeFieldEnd();
        }
        if (struct.Input_Graph_Conf_File != null) {
          oprot.writeFieldBegin(INPUT__GRAPH__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Input_Graph_Conf_File);
          oprot.writeFieldEnd();
        }
        if (struct.Result_Property_Name != null) {
          oprot.writeFieldBegin(RESULT__PROPERTY__NAME_FIELD_DESC);
          oprot.writeString(struct.Result_Property_Name);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode != null) {
          oprot.writeFieldBegin(RUN__MODE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode_Conf_File != null) {
          oprot.writeFieldBegin(RUN__MODE__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode_Conf_File);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Graph_Type != null) {
          oprot.writeFieldBegin(OUTPUT__GRAPH__TYPE_FIELD_DESC);
          oprot.writeString(struct.Output_Graph_Type);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Graph_Conf_File != null) {
          oprot.writeFieldBegin(OUTPUT__GRAPH__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Output_Graph_Conf_File);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopLabelPropagation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_argsTupleScheme getScheme() {
        return new GopLabelPropagation_argsTupleScheme();
      }
    }

    private static class GopLabelPropagation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopLabelPropagation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInput_Graph_Type()) {
          optionals.set(0);
        }
        if (struct.isSetInput_Graph_Conf_File()) {
          optionals.set(1);
        }
        if (struct.isSetResult_Property_Name()) {
          optionals.set(2);
        }
        if (struct.isSetRun_Mode()) {
          optionals.set(3);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          optionals.set(4);
        }
        if (struct.isSetOutput_Graph_Type()) {
          optionals.set(5);
        }
        if (struct.isSetOutput_Graph_Conf_File()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetInput_Graph_Type()) {
          oprot.writeString(struct.Input_Graph_Type);
        }
        if (struct.isSetInput_Graph_Conf_File()) {
          oprot.writeString(struct.Input_Graph_Conf_File);
        }
        if (struct.isSetResult_Property_Name()) {
          oprot.writeString(struct.Result_Property_Name);
        }
        if (struct.isSetRun_Mode()) {
          oprot.writeString(struct.Run_Mode);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          oprot.writeString(struct.Run_Mode_Conf_File);
        }
        if (struct.isSetOutput_Graph_Type()) {
          oprot.writeString(struct.Output_Graph_Type);
        }
        if (struct.isSetOutput_Graph_Conf_File()) {
          oprot.writeString(struct.Output_Graph_Conf_File);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.Input_Graph_Type = iprot.readString();
          struct.setInput_Graph_TypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.Input_Graph_Conf_File = iprot.readString();
          struct.setInput_Graph_Conf_FileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.Result_Property_Name = iprot.readString();
          struct.setResult_Property_NameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.Run_Mode = iprot.readString();
          struct.setRun_ModeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.Run_Mode_Conf_File = iprot.readString();
          struct.setRun_Mode_Conf_FileIsSet(true);
        }
        if (incoming.get(5)) {
          struct.Output_Graph_Type = iprot.readString();
          struct.setOutput_Graph_TypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.Output_Graph_Conf_File = iprot.readString();
          struct.setOutput_Graph_Conf_FileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopLabelPropagation_result implements org.apache.thrift.TBase<GopLabelPropagation_result, GopLabelPropagation_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopLabelPropagation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopLabelPropagation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopLabelPropagation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopLabelPropagation_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopLabelPropagation_result.class, metaDataMap);
    }

    public GopLabelPropagation_result() {
    }

    public GopLabelPropagation_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopLabelPropagation_result(GopLabelPropagation_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GopLabelPropagation_result deepCopy() {
      return new GopLabelPropagation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GopLabelPropagation_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopLabelPropagation_result)
        return this.equals((GopLabelPropagation_result)that);
      return false;
    }

    public boolean equals(GopLabelPropagation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopLabelPropagation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopLabelPropagation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopLabelPropagation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_resultStandardScheme getScheme() {
        return new GopLabelPropagation_resultStandardScheme();
      }
    }

    private static class GopLabelPropagation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopLabelPropagation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopLabelPropagation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopLabelPropagation_resultTupleScheme getScheme() {
        return new GopLabelPropagation_resultTupleScheme();
      }
    }

    private static class GopLabelPropagation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopLabelPropagation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopLabelPropagation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopGraphToCSVFile_args implements org.apache.thrift.TBase<GopGraphToCSVFile_args, GopGraphToCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<GopGraphToCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopGraphToCSVFile_args");

    private static final org.apache.thrift.protocol.TField INPUT__GRAPH__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Graph_Type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT__GRAPH__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Input_Graph_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX__PROPERTY__NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("Vertex_Property_Names", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT__VERTEX__CSV__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Vertex_CSV_File", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EDGE__PROPERTY__NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("Edge_Property_Names", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OUTPUT__EDGE__CSV__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Output_Edge_CSV_File", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField RUN__MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField RUN__MODE__CONF__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("Run_Mode_Conf_File", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopGraphToCSVFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopGraphToCSVFile_argsTupleSchemeFactory();

    public String Input_Graph_Type; // required
    public String Input_Graph_Conf_File; // required
    public String Vertex_Property_Names; // required
    public String Output_Vertex_CSV_File; // required
    public String Edge_Property_Names; // required
    public String Output_Edge_CSV_File; // required
    public String Run_Mode; // required
    public String Run_Mode_Conf_File; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT__GRAPH__TYPE((short)1, "Input_Graph_Type"),
      INPUT__GRAPH__CONF__FILE((short)2, "Input_Graph_Conf_File"),
      VERTEX__PROPERTY__NAMES((short)3, "Vertex_Property_Names"),
      OUTPUT__VERTEX__CSV__FILE((short)4, "Output_Vertex_CSV_File"),
      EDGE__PROPERTY__NAMES((short)5, "Edge_Property_Names"),
      OUTPUT__EDGE__CSV__FILE((short)6, "Output_Edge_CSV_File"),
      RUN__MODE((short)7, "Run_Mode"),
      RUN__MODE__CONF__FILE((short)8, "Run_Mode_Conf_File");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT__GRAPH__TYPE
            return INPUT__GRAPH__TYPE;
          case 2: // INPUT__GRAPH__CONF__FILE
            return INPUT__GRAPH__CONF__FILE;
          case 3: // VERTEX__PROPERTY__NAMES
            return VERTEX__PROPERTY__NAMES;
          case 4: // OUTPUT__VERTEX__CSV__FILE
            return OUTPUT__VERTEX__CSV__FILE;
          case 5: // EDGE__PROPERTY__NAMES
            return EDGE__PROPERTY__NAMES;
          case 6: // OUTPUT__EDGE__CSV__FILE
            return OUTPUT__EDGE__CSV__FILE;
          case 7: // RUN__MODE
            return RUN__MODE;
          case 8: // RUN__MODE__CONF__FILE
            return RUN__MODE__CONF__FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT__GRAPH__TYPE, new org.apache.thrift.meta_data.FieldMetaData("Input_Graph_Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT__GRAPH__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Input_Graph_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERTEX__PROPERTY__NAMES, new org.apache.thrift.meta_data.FieldMetaData("Vertex_Property_Names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__VERTEX__CSV__FILE, new org.apache.thrift.meta_data.FieldMetaData("Output_Vertex_CSV_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EDGE__PROPERTY__NAMES, new org.apache.thrift.meta_data.FieldMetaData("Edge_Property_Names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT__EDGE__CSV__FILE, new org.apache.thrift.meta_data.FieldMetaData("Output_Edge_CSV_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUN__MODE__CONF__FILE, new org.apache.thrift.meta_data.FieldMetaData("Run_Mode_Conf_File", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopGraphToCSVFile_args.class, metaDataMap);
    }

    public GopGraphToCSVFile_args() {
    }

    public GopGraphToCSVFile_args(
      String Input_Graph_Type,
      String Input_Graph_Conf_File,
      String Vertex_Property_Names,
      String Output_Vertex_CSV_File,
      String Edge_Property_Names,
      String Output_Edge_CSV_File,
      String Run_Mode,
      String Run_Mode_Conf_File)
    {
      this();
      this.Input_Graph_Type = Input_Graph_Type;
      this.Input_Graph_Conf_File = Input_Graph_Conf_File;
      this.Vertex_Property_Names = Vertex_Property_Names;
      this.Output_Vertex_CSV_File = Output_Vertex_CSV_File;
      this.Edge_Property_Names = Edge_Property_Names;
      this.Output_Edge_CSV_File = Output_Edge_CSV_File;
      this.Run_Mode = Run_Mode;
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopGraphToCSVFile_args(GopGraphToCSVFile_args other) {
      if (other.isSetInput_Graph_Type()) {
        this.Input_Graph_Type = other.Input_Graph_Type;
      }
      if (other.isSetInput_Graph_Conf_File()) {
        this.Input_Graph_Conf_File = other.Input_Graph_Conf_File;
      }
      if (other.isSetVertex_Property_Names()) {
        this.Vertex_Property_Names = other.Vertex_Property_Names;
      }
      if (other.isSetOutput_Vertex_CSV_File()) {
        this.Output_Vertex_CSV_File = other.Output_Vertex_CSV_File;
      }
      if (other.isSetEdge_Property_Names()) {
        this.Edge_Property_Names = other.Edge_Property_Names;
      }
      if (other.isSetOutput_Edge_CSV_File()) {
        this.Output_Edge_CSV_File = other.Output_Edge_CSV_File;
      }
      if (other.isSetRun_Mode()) {
        this.Run_Mode = other.Run_Mode;
      }
      if (other.isSetRun_Mode_Conf_File()) {
        this.Run_Mode_Conf_File = other.Run_Mode_Conf_File;
      }
    }

    public GopGraphToCSVFile_args deepCopy() {
      return new GopGraphToCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.Input_Graph_Type = null;
      this.Input_Graph_Conf_File = null;
      this.Vertex_Property_Names = null;
      this.Output_Vertex_CSV_File = null;
      this.Edge_Property_Names = null;
      this.Output_Edge_CSV_File = null;
      this.Run_Mode = null;
      this.Run_Mode_Conf_File = null;
    }

    public String getInput_Graph_Type() {
      return this.Input_Graph_Type;
    }

    public GopGraphToCSVFile_args setInput_Graph_Type(String Input_Graph_Type) {
      this.Input_Graph_Type = Input_Graph_Type;
      return this;
    }

    public void unsetInput_Graph_Type() {
      this.Input_Graph_Type = null;
    }

    /** Returns true if field Input_Graph_Type is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Graph_Type() {
      return this.Input_Graph_Type != null;
    }

    public void setInput_Graph_TypeIsSet(boolean value) {
      if (!value) {
        this.Input_Graph_Type = null;
      }
    }

    public String getInput_Graph_Conf_File() {
      return this.Input_Graph_Conf_File;
    }

    public GopGraphToCSVFile_args setInput_Graph_Conf_File(String Input_Graph_Conf_File) {
      this.Input_Graph_Conf_File = Input_Graph_Conf_File;
      return this;
    }

    public void unsetInput_Graph_Conf_File() {
      this.Input_Graph_Conf_File = null;
    }

    /** Returns true if field Input_Graph_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetInput_Graph_Conf_File() {
      return this.Input_Graph_Conf_File != null;
    }

    public void setInput_Graph_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Input_Graph_Conf_File = null;
      }
    }

    public String getVertex_Property_Names() {
      return this.Vertex_Property_Names;
    }

    public GopGraphToCSVFile_args setVertex_Property_Names(String Vertex_Property_Names) {
      this.Vertex_Property_Names = Vertex_Property_Names;
      return this;
    }

    public void unsetVertex_Property_Names() {
      this.Vertex_Property_Names = null;
    }

    /** Returns true if field Vertex_Property_Names is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex_Property_Names() {
      return this.Vertex_Property_Names != null;
    }

    public void setVertex_Property_NamesIsSet(boolean value) {
      if (!value) {
        this.Vertex_Property_Names = null;
      }
    }

    public String getOutput_Vertex_CSV_File() {
      return this.Output_Vertex_CSV_File;
    }

    public GopGraphToCSVFile_args setOutput_Vertex_CSV_File(String Output_Vertex_CSV_File) {
      this.Output_Vertex_CSV_File = Output_Vertex_CSV_File;
      return this;
    }

    public void unsetOutput_Vertex_CSV_File() {
      this.Output_Vertex_CSV_File = null;
    }

    /** Returns true if field Output_Vertex_CSV_File is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Vertex_CSV_File() {
      return this.Output_Vertex_CSV_File != null;
    }

    public void setOutput_Vertex_CSV_FileIsSet(boolean value) {
      if (!value) {
        this.Output_Vertex_CSV_File = null;
      }
    }

    public String getEdge_Property_Names() {
      return this.Edge_Property_Names;
    }

    public GopGraphToCSVFile_args setEdge_Property_Names(String Edge_Property_Names) {
      this.Edge_Property_Names = Edge_Property_Names;
      return this;
    }

    public void unsetEdge_Property_Names() {
      this.Edge_Property_Names = null;
    }

    /** Returns true if field Edge_Property_Names is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge_Property_Names() {
      return this.Edge_Property_Names != null;
    }

    public void setEdge_Property_NamesIsSet(boolean value) {
      if (!value) {
        this.Edge_Property_Names = null;
      }
    }

    public String getOutput_Edge_CSV_File() {
      return this.Output_Edge_CSV_File;
    }

    public GopGraphToCSVFile_args setOutput_Edge_CSV_File(String Output_Edge_CSV_File) {
      this.Output_Edge_CSV_File = Output_Edge_CSV_File;
      return this;
    }

    public void unsetOutput_Edge_CSV_File() {
      this.Output_Edge_CSV_File = null;
    }

    /** Returns true if field Output_Edge_CSV_File is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput_Edge_CSV_File() {
      return this.Output_Edge_CSV_File != null;
    }

    public void setOutput_Edge_CSV_FileIsSet(boolean value) {
      if (!value) {
        this.Output_Edge_CSV_File = null;
      }
    }

    public String getRun_Mode() {
      return this.Run_Mode;
    }

    public GopGraphToCSVFile_args setRun_Mode(String Run_Mode) {
      this.Run_Mode = Run_Mode;
      return this;
    }

    public void unsetRun_Mode() {
      this.Run_Mode = null;
    }

    /** Returns true if field Run_Mode is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode() {
      return this.Run_Mode != null;
    }

    public void setRun_ModeIsSet(boolean value) {
      if (!value) {
        this.Run_Mode = null;
      }
    }

    public String getRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File;
    }

    public GopGraphToCSVFile_args setRun_Mode_Conf_File(String Run_Mode_Conf_File) {
      this.Run_Mode_Conf_File = Run_Mode_Conf_File;
      return this;
    }

    public void unsetRun_Mode_Conf_File() {
      this.Run_Mode_Conf_File = null;
    }

    /** Returns true if field Run_Mode_Conf_File is set (has been assigned a value) and false otherwise */
    public boolean isSetRun_Mode_Conf_File() {
      return this.Run_Mode_Conf_File != null;
    }

    public void setRun_Mode_Conf_FileIsSet(boolean value) {
      if (!value) {
        this.Run_Mode_Conf_File = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT__GRAPH__TYPE:
        if (value == null) {
          unsetInput_Graph_Type();
        } else {
          setInput_Graph_Type((String)value);
        }
        break;

      case INPUT__GRAPH__CONF__FILE:
        if (value == null) {
          unsetInput_Graph_Conf_File();
        } else {
          setInput_Graph_Conf_File((String)value);
        }
        break;

      case VERTEX__PROPERTY__NAMES:
        if (value == null) {
          unsetVertex_Property_Names();
        } else {
          setVertex_Property_Names((String)value);
        }
        break;

      case OUTPUT__VERTEX__CSV__FILE:
        if (value == null) {
          unsetOutput_Vertex_CSV_File();
        } else {
          setOutput_Vertex_CSV_File((String)value);
        }
        break;

      case EDGE__PROPERTY__NAMES:
        if (value == null) {
          unsetEdge_Property_Names();
        } else {
          setEdge_Property_Names((String)value);
        }
        break;

      case OUTPUT__EDGE__CSV__FILE:
        if (value == null) {
          unsetOutput_Edge_CSV_File();
        } else {
          setOutput_Edge_CSV_File((String)value);
        }
        break;

      case RUN__MODE:
        if (value == null) {
          unsetRun_Mode();
        } else {
          setRun_Mode((String)value);
        }
        break;

      case RUN__MODE__CONF__FILE:
        if (value == null) {
          unsetRun_Mode_Conf_File();
        } else {
          setRun_Mode_Conf_File((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT__GRAPH__TYPE:
        return getInput_Graph_Type();

      case INPUT__GRAPH__CONF__FILE:
        return getInput_Graph_Conf_File();

      case VERTEX__PROPERTY__NAMES:
        return getVertex_Property_Names();

      case OUTPUT__VERTEX__CSV__FILE:
        return getOutput_Vertex_CSV_File();

      case EDGE__PROPERTY__NAMES:
        return getEdge_Property_Names();

      case OUTPUT__EDGE__CSV__FILE:
        return getOutput_Edge_CSV_File();

      case RUN__MODE:
        return getRun_Mode();

      case RUN__MODE__CONF__FILE:
        return getRun_Mode_Conf_File();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT__GRAPH__TYPE:
        return isSetInput_Graph_Type();
      case INPUT__GRAPH__CONF__FILE:
        return isSetInput_Graph_Conf_File();
      case VERTEX__PROPERTY__NAMES:
        return isSetVertex_Property_Names();
      case OUTPUT__VERTEX__CSV__FILE:
        return isSetOutput_Vertex_CSV_File();
      case EDGE__PROPERTY__NAMES:
        return isSetEdge_Property_Names();
      case OUTPUT__EDGE__CSV__FILE:
        return isSetOutput_Edge_CSV_File();
      case RUN__MODE:
        return isSetRun_Mode();
      case RUN__MODE__CONF__FILE:
        return isSetRun_Mode_Conf_File();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopGraphToCSVFile_args)
        return this.equals((GopGraphToCSVFile_args)that);
      return false;
    }

    public boolean equals(GopGraphToCSVFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_Input_Graph_Type = true && this.isSetInput_Graph_Type();
      boolean that_present_Input_Graph_Type = true && that.isSetInput_Graph_Type();
      if (this_present_Input_Graph_Type || that_present_Input_Graph_Type) {
        if (!(this_present_Input_Graph_Type && that_present_Input_Graph_Type))
          return false;
        if (!this.Input_Graph_Type.equals(that.Input_Graph_Type))
          return false;
      }

      boolean this_present_Input_Graph_Conf_File = true && this.isSetInput_Graph_Conf_File();
      boolean that_present_Input_Graph_Conf_File = true && that.isSetInput_Graph_Conf_File();
      if (this_present_Input_Graph_Conf_File || that_present_Input_Graph_Conf_File) {
        if (!(this_present_Input_Graph_Conf_File && that_present_Input_Graph_Conf_File))
          return false;
        if (!this.Input_Graph_Conf_File.equals(that.Input_Graph_Conf_File))
          return false;
      }

      boolean this_present_Vertex_Property_Names = true && this.isSetVertex_Property_Names();
      boolean that_present_Vertex_Property_Names = true && that.isSetVertex_Property_Names();
      if (this_present_Vertex_Property_Names || that_present_Vertex_Property_Names) {
        if (!(this_present_Vertex_Property_Names && that_present_Vertex_Property_Names))
          return false;
        if (!this.Vertex_Property_Names.equals(that.Vertex_Property_Names))
          return false;
      }

      boolean this_present_Output_Vertex_CSV_File = true && this.isSetOutput_Vertex_CSV_File();
      boolean that_present_Output_Vertex_CSV_File = true && that.isSetOutput_Vertex_CSV_File();
      if (this_present_Output_Vertex_CSV_File || that_present_Output_Vertex_CSV_File) {
        if (!(this_present_Output_Vertex_CSV_File && that_present_Output_Vertex_CSV_File))
          return false;
        if (!this.Output_Vertex_CSV_File.equals(that.Output_Vertex_CSV_File))
          return false;
      }

      boolean this_present_Edge_Property_Names = true && this.isSetEdge_Property_Names();
      boolean that_present_Edge_Property_Names = true && that.isSetEdge_Property_Names();
      if (this_present_Edge_Property_Names || that_present_Edge_Property_Names) {
        if (!(this_present_Edge_Property_Names && that_present_Edge_Property_Names))
          return false;
        if (!this.Edge_Property_Names.equals(that.Edge_Property_Names))
          return false;
      }

      boolean this_present_Output_Edge_CSV_File = true && this.isSetOutput_Edge_CSV_File();
      boolean that_present_Output_Edge_CSV_File = true && that.isSetOutput_Edge_CSV_File();
      if (this_present_Output_Edge_CSV_File || that_present_Output_Edge_CSV_File) {
        if (!(this_present_Output_Edge_CSV_File && that_present_Output_Edge_CSV_File))
          return false;
        if (!this.Output_Edge_CSV_File.equals(that.Output_Edge_CSV_File))
          return false;
      }

      boolean this_present_Run_Mode = true && this.isSetRun_Mode();
      boolean that_present_Run_Mode = true && that.isSetRun_Mode();
      if (this_present_Run_Mode || that_present_Run_Mode) {
        if (!(this_present_Run_Mode && that_present_Run_Mode))
          return false;
        if (!this.Run_Mode.equals(that.Run_Mode))
          return false;
      }

      boolean this_present_Run_Mode_Conf_File = true && this.isSetRun_Mode_Conf_File();
      boolean that_present_Run_Mode_Conf_File = true && that.isSetRun_Mode_Conf_File();
      if (this_present_Run_Mode_Conf_File || that_present_Run_Mode_Conf_File) {
        if (!(this_present_Run_Mode_Conf_File && that_present_Run_Mode_Conf_File))
          return false;
        if (!this.Run_Mode_Conf_File.equals(that.Run_Mode_Conf_File))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInput_Graph_Type()) ? 131071 : 524287);
      if (isSetInput_Graph_Type())
        hashCode = hashCode * 8191 + Input_Graph_Type.hashCode();

      hashCode = hashCode * 8191 + ((isSetInput_Graph_Conf_File()) ? 131071 : 524287);
      if (isSetInput_Graph_Conf_File())
        hashCode = hashCode * 8191 + Input_Graph_Conf_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetVertex_Property_Names()) ? 131071 : 524287);
      if (isSetVertex_Property_Names())
        hashCode = hashCode * 8191 + Vertex_Property_Names.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Vertex_CSV_File()) ? 131071 : 524287);
      if (isSetOutput_Vertex_CSV_File())
        hashCode = hashCode * 8191 + Output_Vertex_CSV_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetEdge_Property_Names()) ? 131071 : 524287);
      if (isSetEdge_Property_Names())
        hashCode = hashCode * 8191 + Edge_Property_Names.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutput_Edge_CSV_File()) ? 131071 : 524287);
      if (isSetOutput_Edge_CSV_File())
        hashCode = hashCode * 8191 + Output_Edge_CSV_File.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode()) ? 131071 : 524287);
      if (isSetRun_Mode())
        hashCode = hashCode * 8191 + Run_Mode.hashCode();

      hashCode = hashCode * 8191 + ((isSetRun_Mode_Conf_File()) ? 131071 : 524287);
      if (isSetRun_Mode_Conf_File())
        hashCode = hashCode * 8191 + Run_Mode_Conf_File.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopGraphToCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInput_Graph_Type()).compareTo(other.isSetInput_Graph_Type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Graph_Type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Graph_Type, other.Input_Graph_Type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInput_Graph_Conf_File()).compareTo(other.isSetInput_Graph_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput_Graph_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Input_Graph_Conf_File, other.Input_Graph_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex_Property_Names()).compareTo(other.isSetVertex_Property_Names());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex_Property_Names()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Vertex_Property_Names, other.Vertex_Property_Names);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Vertex_CSV_File()).compareTo(other.isSetOutput_Vertex_CSV_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Vertex_CSV_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Vertex_CSV_File, other.Output_Vertex_CSV_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEdge_Property_Names()).compareTo(other.isSetEdge_Property_Names());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge_Property_Names()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Edge_Property_Names, other.Edge_Property_Names);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput_Edge_CSV_File()).compareTo(other.isSetOutput_Edge_CSV_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput_Edge_CSV_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Output_Edge_CSV_File, other.Output_Edge_CSV_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode()).compareTo(other.isSetRun_Mode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode, other.Run_Mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRun_Mode_Conf_File()).compareTo(other.isSetRun_Mode_Conf_File());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRun_Mode_Conf_File()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Run_Mode_Conf_File, other.Run_Mode_Conf_File);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopGraphToCSVFile_args(");
      boolean first = true;

      sb.append("Input_Graph_Type:");
      if (this.Input_Graph_Type == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Graph_Type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Input_Graph_Conf_File:");
      if (this.Input_Graph_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Input_Graph_Conf_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Vertex_Property_Names:");
      if (this.Vertex_Property_Names == null) {
        sb.append("null");
      } else {
        sb.append(this.Vertex_Property_Names);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Vertex_CSV_File:");
      if (this.Output_Vertex_CSV_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Vertex_CSV_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Edge_Property_Names:");
      if (this.Edge_Property_Names == null) {
        sb.append("null");
      } else {
        sb.append(this.Edge_Property_Names);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Output_Edge_CSV_File:");
      if (this.Output_Edge_CSV_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Output_Edge_CSV_File);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode:");
      if (this.Run_Mode == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Run_Mode_Conf_File:");
      if (this.Run_Mode_Conf_File == null) {
        sb.append("null");
      } else {
        sb.append(this.Run_Mode_Conf_File);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopGraphToCSVFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_argsStandardScheme getScheme() {
        return new GopGraphToCSVFile_argsStandardScheme();
      }
    }

    private static class GopGraphToCSVFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopGraphToCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT__GRAPH__TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Graph_Type = iprot.readString();
                struct.setInput_Graph_TypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT__GRAPH__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Input_Graph_Conf_File = iprot.readString();
                struct.setInput_Graph_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX__PROPERTY__NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Vertex_Property_Names = iprot.readString();
                struct.setVertex_Property_NamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT__VERTEX__CSV__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Vertex_CSV_File = iprot.readString();
                struct.setOutput_Vertex_CSV_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EDGE__PROPERTY__NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Edge_Property_Names = iprot.readString();
                struct.setEdge_Property_NamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OUTPUT__EDGE__CSV__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Output_Edge_CSV_File = iprot.readString();
                struct.setOutput_Edge_CSV_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RUN__MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode = iprot.readString();
                struct.setRun_ModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RUN__MODE__CONF__FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Run_Mode_Conf_File = iprot.readString();
                struct.setRun_Mode_Conf_FileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Input_Graph_Type != null) {
          oprot.writeFieldBegin(INPUT__GRAPH__TYPE_FIELD_DESC);
          oprot.writeString(struct.Input_Graph_Type);
          oprot.writeFieldEnd();
        }
        if (struct.Input_Graph_Conf_File != null) {
          oprot.writeFieldBegin(INPUT__GRAPH__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Input_Graph_Conf_File);
          oprot.writeFieldEnd();
        }
        if (struct.Vertex_Property_Names != null) {
          oprot.writeFieldBegin(VERTEX__PROPERTY__NAMES_FIELD_DESC);
          oprot.writeString(struct.Vertex_Property_Names);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Vertex_CSV_File != null) {
          oprot.writeFieldBegin(OUTPUT__VERTEX__CSV__FILE_FIELD_DESC);
          oprot.writeString(struct.Output_Vertex_CSV_File);
          oprot.writeFieldEnd();
        }
        if (struct.Edge_Property_Names != null) {
          oprot.writeFieldBegin(EDGE__PROPERTY__NAMES_FIELD_DESC);
          oprot.writeString(struct.Edge_Property_Names);
          oprot.writeFieldEnd();
        }
        if (struct.Output_Edge_CSV_File != null) {
          oprot.writeFieldBegin(OUTPUT__EDGE__CSV__FILE_FIELD_DESC);
          oprot.writeString(struct.Output_Edge_CSV_File);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode != null) {
          oprot.writeFieldBegin(RUN__MODE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode);
          oprot.writeFieldEnd();
        }
        if (struct.Run_Mode_Conf_File != null) {
          oprot.writeFieldBegin(RUN__MODE__CONF__FILE_FIELD_DESC);
          oprot.writeString(struct.Run_Mode_Conf_File);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopGraphToCSVFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_argsTupleScheme getScheme() {
        return new GopGraphToCSVFile_argsTupleScheme();
      }
    }

    private static class GopGraphToCSVFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopGraphToCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInput_Graph_Type()) {
          optionals.set(0);
        }
        if (struct.isSetInput_Graph_Conf_File()) {
          optionals.set(1);
        }
        if (struct.isSetVertex_Property_Names()) {
          optionals.set(2);
        }
        if (struct.isSetOutput_Vertex_CSV_File()) {
          optionals.set(3);
        }
        if (struct.isSetEdge_Property_Names()) {
          optionals.set(4);
        }
        if (struct.isSetOutput_Edge_CSV_File()) {
          optionals.set(5);
        }
        if (struct.isSetRun_Mode()) {
          optionals.set(6);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetInput_Graph_Type()) {
          oprot.writeString(struct.Input_Graph_Type);
        }
        if (struct.isSetInput_Graph_Conf_File()) {
          oprot.writeString(struct.Input_Graph_Conf_File);
        }
        if (struct.isSetVertex_Property_Names()) {
          oprot.writeString(struct.Vertex_Property_Names);
        }
        if (struct.isSetOutput_Vertex_CSV_File()) {
          oprot.writeString(struct.Output_Vertex_CSV_File);
        }
        if (struct.isSetEdge_Property_Names()) {
          oprot.writeString(struct.Edge_Property_Names);
        }
        if (struct.isSetOutput_Edge_CSV_File()) {
          oprot.writeString(struct.Output_Edge_CSV_File);
        }
        if (struct.isSetRun_Mode()) {
          oprot.writeString(struct.Run_Mode);
        }
        if (struct.isSetRun_Mode_Conf_File()) {
          oprot.writeString(struct.Run_Mode_Conf_File);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.Input_Graph_Type = iprot.readString();
          struct.setInput_Graph_TypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.Input_Graph_Conf_File = iprot.readString();
          struct.setInput_Graph_Conf_FileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.Vertex_Property_Names = iprot.readString();
          struct.setVertex_Property_NamesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.Output_Vertex_CSV_File = iprot.readString();
          struct.setOutput_Vertex_CSV_FileIsSet(true);
        }
        if (incoming.get(4)) {
          struct.Edge_Property_Names = iprot.readString();
          struct.setEdge_Property_NamesIsSet(true);
        }
        if (incoming.get(5)) {
          struct.Output_Edge_CSV_File = iprot.readString();
          struct.setOutput_Edge_CSV_FileIsSet(true);
        }
        if (incoming.get(6)) {
          struct.Run_Mode = iprot.readString();
          struct.setRun_ModeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.Run_Mode_Conf_File = iprot.readString();
          struct.setRun_Mode_Conf_FileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GopGraphToCSVFile_result implements org.apache.thrift.TBase<GopGraphToCSVFile_result, GopGraphToCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<GopGraphToCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GopGraphToCSVFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GopGraphToCSVFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GopGraphToCSVFile_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GopGraphToCSVFile_result.class, metaDataMap);
    }

    public GopGraphToCSVFile_result() {
    }

    public GopGraphToCSVFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GopGraphToCSVFile_result(GopGraphToCSVFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GopGraphToCSVFile_result deepCopy() {
      return new GopGraphToCSVFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GopGraphToCSVFile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GopGraphToCSVFile_result)
        return this.equals((GopGraphToCSVFile_result)that);
      return false;
    }

    public boolean equals(GopGraphToCSVFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GopGraphToCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GopGraphToCSVFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GopGraphToCSVFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_resultStandardScheme getScheme() {
        return new GopGraphToCSVFile_resultStandardScheme();
      }
    }

    private static class GopGraphToCSVFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GopGraphToCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GopGraphToCSVFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GopGraphToCSVFile_resultTupleScheme getScheme() {
        return new GopGraphToCSVFile_resultTupleScheme();
      }
    }

    private static class GopGraphToCSVFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GopGraphToCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GopGraphToCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
